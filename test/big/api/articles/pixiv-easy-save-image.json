{"title":"Pixiv 簡單存圖","slug":"pixiv-easy-save-image","date":"2019-03-16T14:58:18.000Z","updated":"2019-08-16T11:14:47.599Z","comments":true,"path":"api/articles/pixiv-easy-save-image.json","excerpt":"這是一個在瀏覽器使用的使用者腳本，可以讓你簡單的在 Pixiv 上面存圖載點與原始碼GreasyFork: 369930-pixiv-easy-save-imageGitHub: maple3142/browser-extensions pixiv-easy-save-image.user.js使用教學請點進上方的 GreasyFork 中閱讀，本文主要以介紹原理為主功能存單圖存多圖為 zip存漫畫為 zip存動圖為 gif自訂檔案名稱格式存圖只需按一個鍵支援多頁面，包括作品頁、首頁、收藏、搜尋等等…與 Patchouli 腳本相容","covers":null,"content":"<p>這是一個在瀏覽器使用的使用者腳本，可以讓你簡單的在 <a href=\"https://www.pixiv.net/\" target=\"_blank\" rel=\"noopener\">Pixiv</a> 上面存圖</p>\n<h1 id=\"載點與原始碼\"><a href=\"#載點與原始碼\" class=\"headerlink\" title=\"載點與原始碼\"></a>載點與原始碼</h1><ul>\n<li>GreasyFork: <a href=\"https://greasyfork.org/zh-TW/scripts/369930-pixiv-easy-save-image\" target=\"_blank\" rel=\"noopener\">369930-pixiv-easy-save-image</a></li>\n<li>GitHub: <a href=\"https://github.com/maple3142/browser-extensions/blob/master/scripts/pixiv-easy-save-image.user.js\" target=\"_blank\" rel=\"noopener\">maple3142/browser-extensions pixiv-easy-save-image.user.js</a></li>\n</ul>\n<p>使用教學請點進上方的 GreasyFork 中閱讀，本文主要以介紹原理為主</p>\n<h1 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h1><ul>\n<li>存單圖</li>\n<li>存多圖為 zip</li>\n<li>存漫畫為 zip</li>\n<li>存動圖為 gif</li>\n<li>自訂檔案名稱格式</li>\n<li>存圖只需按一個鍵</li>\n<li>支援多頁面，包括作品頁、首頁、收藏、搜尋等等…</li>\n<li>與 <a href=\"https://github.com/FlandreDaisuki/Patchouli\" target=\"_blank\" rel=\"noopener\">Patchouli</a> 腳本相容</li>\n</ul>\n<a id=\"more\"></a>\n\n<h1 id=\"架構\"><a href=\"#架構\" class=\"headerlink\" title=\"架構\"></a>架構</h1><p>以下是本腳本的基本執行流程:</p>\n<blockquote>\n<p>按下鍵盤的事件 -&gt; 取得目前選取的圖片 id -&gt; 取得圖片資訊 -&gt; 根據種類個別下載圖片</p>\n</blockquote>\n<h2 id=\"按下鍵盤並取得圖片-id\"><a href=\"#按下鍵盤並取得圖片-id\" class=\"headerlink\" title=\"按下鍵盤並取得圖片 id\"></a>按下鍵盤並取得圖片 id</h2><p>v0.6.0 的程式碼:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// key shortcut</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> SELECTOR_MAP = &#123;</span><br><span class=\"line\">    <span class=\"string\">'/'</span>: <span class=\"string\">'a.work:hover,a._work:hover,.illust-item-root&gt;a:hover'</span>,</span><br><span class=\"line\">    <span class=\"string\">'/bookmark.php'</span>: <span class=\"string\">'a.work:hover,.image-item-image&gt;a:hover'</span>,</span><br><span class=\"line\">    <span class=\"string\">'/new_illust.php'</span>: <span class=\"string\">'a.work:hover,.image-item-image&gt;a:hover'</span>,</span><br><span class=\"line\">    <span class=\"string\">'/bookmark_new_illust.php'</span>: <span class=\"string\">'figure&gt;div&gt;a:hover,.illust-item-root&gt;a:hover'</span>,</span><br><span class=\"line\">    <span class=\"string\">'/member_illust.php'</span>: <span class=\"string\">'div[role=presentation]&gt;a:hover,canvas:hover'</span>,</span><br><span class=\"line\">    <span class=\"string\">'/ranking.php'</span>: <span class=\"string\">'a.work:hover,.illust-item-root&gt;a:hover'</span>,</span><br><span class=\"line\">    <span class=\"string\">'/search.php'</span>: <span class=\"string\">'figure&gt;div&gt;a:hover'</span>,</span><br><span class=\"line\">    <span class=\"string\">'/member.php'</span>: <span class=\"string\">'[href^=\"/member_illust.php\"]:hover,.illust-item-root&gt;a:hover'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> selector = SELECTOR_MAP[location.pathname]</span><br><span class=\"line\">  addEventListener(<span class=\"string\">'keydown'</span>, e =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e.which !== KEYCODE_TO_SAVE) <span class=\"keyword\">return</span></span><br><span class=\"line\">    e.preventDefault()</span><br><span class=\"line\">    e.stopPropagation()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> id</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!id &amp;&amp; $(<span class=\"string\">'#Patchouli'</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> el = $(<span class=\"string\">'.image-item-image:hover&gt;a'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!el) <span class=\"keyword\">return</span></span><br><span class=\"line\">      id = <span class=\"regexp\">/\\d+/</span>.exec(el.href.split(<span class=\"string\">'/'</span>).pop())[<span class=\"number\">0</span>]</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> selector === <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> el = $(selector)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!el) <span class=\"keyword\">return</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (el.href) id = <span class=\"regexp\">/\\d+/</span>.exec(el.href.split(<span class=\"string\">'/'</span>).pop())[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"keyword\">else</span> id = <span class=\"keyword\">new</span> URLSearchParams(location.search).get(<span class=\"string\">'illust_id'</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      id = selector()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (id) saveImage(FORMAT, id).catch(<span class=\"built_in\">console</span>.error)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中可以很明顯的知道它在收到<code>keydown</code>的事件時先檢查是否與設定好的按鍵相符，不符則直接忽略</p>\n<p>下方會根據目前的頁面從上面的<code>SELECTOR_MAP</code>取得特定得選擇器，而該選擇器都會選到正在<code>hover</code>狀態的<code>&lt;a&gt;</code>元素，並從其<code>href</code>中取得圖片的 id<br>而若是使用者有安裝 Patchouli 腳本，則會直接使用選擇器<code>.image-item-image:hover&gt;a</code>從它的圖片列表中選取圖片</p>\n<p>在取得 id 後會直接呼叫<code>saveImage</code>函數去儲存圖片</p>\n<h2 id=\"saveImage-函數\"><a href=\"#saveImage-函數\" class=\"headerlink\" title=\"saveImage 函數\"></a>saveImage 函數</h2><p>v0.6.0 的程式碼:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> saveImage = <span class=\"keyword\">async</span> (&#123; single, multiple &#125;, id) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> illustData = <span class=\"keyword\">await</span> getIllustData(id)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> results</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; illustType &#125; = illustData</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (illustType) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// normal</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> url = illustData.urls.original</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ext = url</span><br><span class=\"line\">          .split(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">          .pop()</span><br><span class=\"line\">          .split(<span class=\"string\">'.'</span>)</span><br><span class=\"line\">          .pop()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (illustData.pageCount === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">          results = [[single(illustData) + <span class=\"string\">'.'</span> + ext, <span class=\"keyword\">await</span> getCrossOriginBlob(url)]]</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> len = illustData.pageCount</span><br><span class=\"line\">          <span class=\"keyword\">const</span> ar = []</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            ar.push(</span><br><span class=\"line\">              <span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">                multiple(illustData, i) + <span class=\"string\">'.'</span> + ext,</span><br><span class=\"line\">                getCrossOriginBlob(url.replace(<span class=\"string\">'p0'</span>, <span class=\"string\">`p<span class=\"subst\">$&#123;i&#125;</span>`</span>))</span><br><span class=\"line\">              ])</span><br><span class=\"line\">            )</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          results = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all(ar)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ugoira</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> fname = single(illustData)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> numCpu = navigator.hardwareConcurrency || <span class=\"number\">4</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> gif = <span class=\"keyword\">new</span> GIF(&#123; <span class=\"attr\">workers</span>: numCpu * <span class=\"number\">4</span>, <span class=\"attr\">quality</span>: <span class=\"number\">10</span> &#125;)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ugoiraMeta = <span class=\"keyword\">await</span> getUgoiraMeta(id)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ugoiraZip = <span class=\"keyword\">await</span> xf.get(ugoiraMeta.originalSrc).blob()</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; files &#125; = <span class=\"keyword\">await</span> JSZip.loadAsync(ugoiraZip)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> gifFrames = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all(<span class=\"built_in\">Object</span>.values(files).map(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span> f.async(<span class=\"string\">'blob'</span>).then(blobToImg)))</span><br><span class=\"line\">      <span class=\"keyword\">const</span> getGif = <span class=\"function\">(<span class=\"params\">data, frames</span>) =&gt;</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; frames.length; i++) &#123;</span><br><span class=\"line\">            gif.addFrame(frames[i], &#123; <span class=\"attr\">delay</span>: data.frames[i].delay &#125;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          gif.on(<span class=\"string\">'finished'</span>, x =&gt; &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'gif'</span>)</span><br><span class=\"line\">            res(x)</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          gif.on(<span class=\"string\">'error'</span>, rej)</span><br><span class=\"line\">          gif.render()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      results = <span class=\"keyword\">await</span> [[fname + <span class=\"string\">'.gif'</span>, <span class=\"keyword\">await</span> getGif(ugoiraMeta, gifFrames)]]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (results.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [f, blob] = results[<span class=\"number\">0</span>]</span><br><span class=\"line\">    downloadBlob(blob, f)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> zip = <span class=\"keyword\">new</span> JSZip()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [f, blob] <span class=\"keyword\">of</span> results) &#123;</span><br><span class=\"line\">      zip.file(f, blob)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> blob = <span class=\"keyword\">await</span> zip.generateAsync(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'blob'</span> &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> zipname = single(illustData)</span><br><span class=\"line\">    downloadBlob(blob, zipname)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"取得圖片資訊\"><a href=\"#取得圖片資訊\" class=\"headerlink\" title=\"取得圖片資訊\"></a>取得圖片資訊</h3><p>這部分的程式碼被我寫成函數了，可以在 <a href=\"https://github.com/maple3142/browser-extensions/blob/c2d2760f4282d3ac5f1d67a3caf7ff82c05251b8/scripts/pixiv-easy-save-image.user.js#L90-L92\" target=\"_blank\" rel=\"noopener\">L90-L92</a> 看到<br>它會發送<code>GET /ajax/illust/:id</code>形式的請求取得 json 格式的圖片資訊，並依照其中的<code>illustType</code>分類，<code>0</code>和<code>1</code>分別是插畫與漫畫，而<code>2</code>代表的是動圖<br>動圖方面則另外發送<code>GET /ajax/illust/:id/ugoira_meta</code>的請求取得資訊</p>\n<h3 id=\"單圖、多圖與漫畫\"><a href=\"#單圖、多圖與漫畫\" class=\"headerlink\" title=\"單圖、多圖與漫畫\"></a>單圖、多圖與漫畫</h3><p>這在上方的<code>case 0:</code> <code>case 1:</code>的部分</p>\n<p>先從<code>illustData.urls.original</code>取得網址與副檔名，然後依照圖片數量選擇要呼叫<code>FORMAT.single</code>還是<code>FORMAT.multiple</code>得到檔案名稱，並將結果存到<code>results</code>陣列裡<br><code>results</code>陣列的格式大略為<code>Pair&lt;name,blobdata&gt;[]</code>，然後在下方依照其數量選擇直接下載或壓縮為<code>zip</code>再下載</p>\n<blockquote>\n<p>壓縮檔是使用 <a href=\"https://stuk.github.io/jszip/\" target=\"_blank\" rel=\"noopener\">JSZip</a> 處裡的，支援壓縮和解壓縮</p>\n</blockquote>\n<h3 id=\"動圖\"><a href=\"#動圖\" class=\"headerlink\" title=\"動圖\"></a>動圖</h3><p>在<code>case 2:</code>的部分</p>\n<p>這會先從<code>ugoiraMeta.originalSrc</code>取得一個壓縮檔的網址，然後取得其內容並將它解壓縮<br>再來會用額外的 <a href=\"https://jnordberg.github.io/gif.js/\" target=\"_blank\" rel=\"noopener\">gif.js</a> 產生一個<code>GIF</code>的物件，其<code>workers</code>數量是 CPU 數量的四倍</p>\n<p>再來後面會利用到解壓縮出來的檔案<code>frames</code>和各張圖所持續的時間資料<code>ugoiraMeta.frames</code>去呼叫<code>gif.addFrame</code>函數<br>當圖片處理好之後就直接回傳它的 blobdata 存到 <code>results</code> 陣列裡面，接下來做的事就和上面一樣了</p>\n<h3 id=\"getCrossOriginBlob-函數\"><a href=\"#getCrossOriginBlob-函數\" class=\"headerlink\" title=\"getCrossOriginBlob 函數\"></a>getCrossOriginBlob 函數</h3><p>v0.6.0 的程式碼:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getCrossOriginBlob = <span class=\"function\">(<span class=\"params\">url, Referer = <span class=\"string\">'https://www.pixiv.net/'</span></span>) =&gt;</span> gxf.get(url, &#123; <span class=\"attr\">headers</span>: &#123; Referer &#125; &#125;).blob()</span><br></pre></td></tr></table></figure>\n\n<p>其實可以發現我在抓圖片時會使用這個函數，原因是我需要取得圖片資料，但圖片的網域在<code>pximg.net</code>，直接發送請求會有同源政策的問題<br>而使用腳本管理器的跨域請求函數<code>GM_xmlhttpRequest</code>預設不會帶<code>Referer</code>，這又會導致<code>pximg.net</code>回傳<code>403 Forbidden</code></p>\n<p>其中的<code>gxf</code>是結合 <a href=\"https://github.com/maple3142/gmxhr-fetch\" target=\"_blank\" rel=\"noopener\">gmxhr-fetch</a> 和 <a href=\"https://github.com/maple3142/xfetch-js\" target=\"_blank\" rel=\"noopener\">xfetch-js</a> 所產生出的物件，基本上就是一個跨域發 http 請求的 http client</p>\n<h1 id=\"後記\"><a href=\"#後記\" class=\"headerlink\" title=\"後記\"></a>後記</h1><p>其實我發這篇文章是因為覺得太久發新文章了，之前不發新聞章是為了大學學測。但現在已經考完了，再不發真的說不過去…</p>\n","more":"<h1 id=\"架構\"><a href=\"#架構\" class=\"headerlink\" title=\"架構\"></a>架構</h1><p>以下是本腳本的基本執行流程:</p>\n<blockquote>\n<p>按下鍵盤的事件 -&gt; 取得目前選取的圖片 id -&gt; 取得圖片資訊 -&gt; 根據種類個別下載圖片</p>\n</blockquote>\n<h2 id=\"按下鍵盤並取得圖片-id\"><a href=\"#按下鍵盤並取得圖片-id\" class=\"headerlink\" title=\"按下鍵盤並取得圖片 id\"></a>按下鍵盤並取得圖片 id</h2><p>v0.6.0 的程式碼:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// key shortcut</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> SELECTOR_MAP = &#123;</span><br><span class=\"line\">    <span class=\"string\">'/'</span>: <span class=\"string\">'a.work:hover,a._work:hover,.illust-item-root&gt;a:hover'</span>,</span><br><span class=\"line\">    <span class=\"string\">'/bookmark.php'</span>: <span class=\"string\">'a.work:hover,.image-item-image&gt;a:hover'</span>,</span><br><span class=\"line\">    <span class=\"string\">'/new_illust.php'</span>: <span class=\"string\">'a.work:hover,.image-item-image&gt;a:hover'</span>,</span><br><span class=\"line\">    <span class=\"string\">'/bookmark_new_illust.php'</span>: <span class=\"string\">'figure&gt;div&gt;a:hover,.illust-item-root&gt;a:hover'</span>,</span><br><span class=\"line\">    <span class=\"string\">'/member_illust.php'</span>: <span class=\"string\">'div[role=presentation]&gt;a:hover,canvas:hover'</span>,</span><br><span class=\"line\">    <span class=\"string\">'/ranking.php'</span>: <span class=\"string\">'a.work:hover,.illust-item-root&gt;a:hover'</span>,</span><br><span class=\"line\">    <span class=\"string\">'/search.php'</span>: <span class=\"string\">'figure&gt;div&gt;a:hover'</span>,</span><br><span class=\"line\">    <span class=\"string\">'/member.php'</span>: <span class=\"string\">'[href^=\"/member_illust.php\"]:hover,.illust-item-root&gt;a:hover'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> selector = SELECTOR_MAP[location.pathname]</span><br><span class=\"line\">  addEventListener(<span class=\"string\">'keydown'</span>, e =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e.which !== KEYCODE_TO_SAVE) <span class=\"keyword\">return</span></span><br><span class=\"line\">    e.preventDefault()</span><br><span class=\"line\">    e.stopPropagation()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> id</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!id &amp;&amp; $(<span class=\"string\">'#Patchouli'</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> el = $(<span class=\"string\">'.image-item-image:hover&gt;a'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!el) <span class=\"keyword\">return</span></span><br><span class=\"line\">      id = <span class=\"regexp\">/\\d+/</span>.exec(el.href.split(<span class=\"string\">'/'</span>).pop())[<span class=\"number\">0</span>]</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> selector === <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> el = $(selector)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!el) <span class=\"keyword\">return</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (el.href) id = <span class=\"regexp\">/\\d+/</span>.exec(el.href.split(<span class=\"string\">'/'</span>).pop())[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"keyword\">else</span> id = <span class=\"keyword\">new</span> URLSearchParams(location.search).get(<span class=\"string\">'illust_id'</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      id = selector()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (id) saveImage(FORMAT, id).catch(<span class=\"built_in\">console</span>.error)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中可以很明顯的知道它在收到<code>keydown</code>的事件時先檢查是否與設定好的按鍵相符，不符則直接忽略</p>\n<p>下方會根據目前的頁面從上面的<code>SELECTOR_MAP</code>取得特定得選擇器，而該選擇器都會選到正在<code>hover</code>狀態的<code>&lt;a&gt;</code>元素，並從其<code>href</code>中取得圖片的 id<br>而若是使用者有安裝 Patchouli 腳本，則會直接使用選擇器<code>.image-item-image:hover&gt;a</code>從它的圖片列表中選取圖片</p>\n<p>在取得 id 後會直接呼叫<code>saveImage</code>函數去儲存圖片</p>\n<h2 id=\"saveImage-函數\"><a href=\"#saveImage-函數\" class=\"headerlink\" title=\"saveImage 函數\"></a>saveImage 函數</h2><p>v0.6.0 的程式碼:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> saveImage = <span class=\"keyword\">async</span> (&#123; single, multiple &#125;, id) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> illustData = <span class=\"keyword\">await</span> getIllustData(id)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> results</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; illustType &#125; = illustData</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (illustType) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// normal</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> url = illustData.urls.original</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ext = url</span><br><span class=\"line\">          .split(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">          .pop()</span><br><span class=\"line\">          .split(<span class=\"string\">'.'</span>)</span><br><span class=\"line\">          .pop()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (illustData.pageCount === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">          results = [[single(illustData) + <span class=\"string\">'.'</span> + ext, <span class=\"keyword\">await</span> getCrossOriginBlob(url)]]</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> len = illustData.pageCount</span><br><span class=\"line\">          <span class=\"keyword\">const</span> ar = []</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            ar.push(</span><br><span class=\"line\">              <span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">                multiple(illustData, i) + <span class=\"string\">'.'</span> + ext,</span><br><span class=\"line\">                getCrossOriginBlob(url.replace(<span class=\"string\">'p0'</span>, <span class=\"string\">`p<span class=\"subst\">$&#123;i&#125;</span>`</span>))</span><br><span class=\"line\">              ])</span><br><span class=\"line\">            )</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          results = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all(ar)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ugoira</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> fname = single(illustData)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> numCpu = navigator.hardwareConcurrency || <span class=\"number\">4</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> gif = <span class=\"keyword\">new</span> GIF(&#123; <span class=\"attr\">workers</span>: numCpu * <span class=\"number\">4</span>, <span class=\"attr\">quality</span>: <span class=\"number\">10</span> &#125;)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ugoiraMeta = <span class=\"keyword\">await</span> getUgoiraMeta(id)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ugoiraZip = <span class=\"keyword\">await</span> xf.get(ugoiraMeta.originalSrc).blob()</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; files &#125; = <span class=\"keyword\">await</span> JSZip.loadAsync(ugoiraZip)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> gifFrames = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all(<span class=\"built_in\">Object</span>.values(files).map(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span> f.async(<span class=\"string\">'blob'</span>).then(blobToImg)))</span><br><span class=\"line\">      <span class=\"keyword\">const</span> getGif = <span class=\"function\">(<span class=\"params\">data, frames</span>) =&gt;</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; frames.length; i++) &#123;</span><br><span class=\"line\">            gif.addFrame(frames[i], &#123; <span class=\"attr\">delay</span>: data.frames[i].delay &#125;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          gif.on(<span class=\"string\">'finished'</span>, x =&gt; &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'gif'</span>)</span><br><span class=\"line\">            res(x)</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          gif.on(<span class=\"string\">'error'</span>, rej)</span><br><span class=\"line\">          gif.render()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      results = <span class=\"keyword\">await</span> [[fname + <span class=\"string\">'.gif'</span>, <span class=\"keyword\">await</span> getGif(ugoiraMeta, gifFrames)]]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (results.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [f, blob] = results[<span class=\"number\">0</span>]</span><br><span class=\"line\">    downloadBlob(blob, f)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> zip = <span class=\"keyword\">new</span> JSZip()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [f, blob] <span class=\"keyword\">of</span> results) &#123;</span><br><span class=\"line\">      zip.file(f, blob)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> blob = <span class=\"keyword\">await</span> zip.generateAsync(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'blob'</span> &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> zipname = single(illustData)</span><br><span class=\"line\">    downloadBlob(blob, zipname)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"取得圖片資訊\"><a href=\"#取得圖片資訊\" class=\"headerlink\" title=\"取得圖片資訊\"></a>取得圖片資訊</h3><p>這部分的程式碼被我寫成函數了，可以在 <a href=\"https://github.com/maple3142/browser-extensions/blob/c2d2760f4282d3ac5f1d67a3caf7ff82c05251b8/scripts/pixiv-easy-save-image.user.js#L90-L92\" target=\"_blank\" rel=\"noopener\">L90-L92</a> 看到<br>它會發送<code>GET /ajax/illust/:id</code>形式的請求取得 json 格式的圖片資訊，並依照其中的<code>illustType</code>分類，<code>0</code>和<code>1</code>分別是插畫與漫畫，而<code>2</code>代表的是動圖<br>動圖方面則另外發送<code>GET /ajax/illust/:id/ugoira_meta</code>的請求取得資訊</p>\n<h3 id=\"單圖、多圖與漫畫\"><a href=\"#單圖、多圖與漫畫\" class=\"headerlink\" title=\"單圖、多圖與漫畫\"></a>單圖、多圖與漫畫</h3><p>這在上方的<code>case 0:</code> <code>case 1:</code>的部分</p>\n<p>先從<code>illustData.urls.original</code>取得網址與副檔名，然後依照圖片數量選擇要呼叫<code>FORMAT.single</code>還是<code>FORMAT.multiple</code>得到檔案名稱，並將結果存到<code>results</code>陣列裡<br><code>results</code>陣列的格式大略為<code>Pair&lt;name,blobdata&gt;[]</code>，然後在下方依照其數量選擇直接下載或壓縮為<code>zip</code>再下載</p>\n<blockquote>\n<p>壓縮檔是使用 <a href=\"https://stuk.github.io/jszip/\" target=\"_blank\" rel=\"noopener\">JSZip</a> 處裡的，支援壓縮和解壓縮</p>\n</blockquote>\n<h3 id=\"動圖\"><a href=\"#動圖\" class=\"headerlink\" title=\"動圖\"></a>動圖</h3><p>在<code>case 2:</code>的部分</p>\n<p>這會先從<code>ugoiraMeta.originalSrc</code>取得一個壓縮檔的網址，然後取得其內容並將它解壓縮<br>再來會用額外的 <a href=\"https://jnordberg.github.io/gif.js/\" target=\"_blank\" rel=\"noopener\">gif.js</a> 產生一個<code>GIF</code>的物件，其<code>workers</code>數量是 CPU 數量的四倍</p>\n<p>再來後面會利用到解壓縮出來的檔案<code>frames</code>和各張圖所持續的時間資料<code>ugoiraMeta.frames</code>去呼叫<code>gif.addFrame</code>函數<br>當圖片處理好之後就直接回傳它的 blobdata 存到 <code>results</code> 陣列裡面，接下來做的事就和上面一樣了</p>\n<h3 id=\"getCrossOriginBlob-函數\"><a href=\"#getCrossOriginBlob-函數\" class=\"headerlink\" title=\"getCrossOriginBlob 函數\"></a>getCrossOriginBlob 函數</h3><p>v0.6.0 的程式碼:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getCrossOriginBlob = <span class=\"function\">(<span class=\"params\">url, Referer = <span class=\"string\">'https://www.pixiv.net/'</span></span>) =&gt;</span> gxf.get(url, &#123; <span class=\"attr\">headers</span>: &#123; Referer &#125; &#125;).blob()</span><br></pre></td></tr></table></figure>\n\n<p>其實可以發現我在抓圖片時會使用這個函數，原因是我需要取得圖片資料，但圖片的網域在<code>pximg.net</code>，直接發送請求會有同源政策的問題<br>而使用腳本管理器的跨域請求函數<code>GM_xmlhttpRequest</code>預設不會帶<code>Referer</code>，這又會導致<code>pximg.net</code>回傳<code>403 Forbidden</code></p>\n<p>其中的<code>gxf</code>是結合 <a href=\"https://github.com/maple3142/gmxhr-fetch\" target=\"_blank\" rel=\"noopener\">gmxhr-fetch</a> 和 <a href=\"https://github.com/maple3142/xfetch-js\" target=\"_blank\" rel=\"noopener\">xfetch-js</a> 所產生出的物件，基本上就是一個跨域發 http 請求的 http client</p>\n<h1 id=\"後記\"><a href=\"#後記\" class=\"headerlink\" title=\"後記\"></a>後記</h1><p>其實我發這篇文章是因為覺得太久發新文章了，之前不發新聞章是為了大學學測。但現在已經考完了，再不發真的說不過去…</p>","categories":[{"name":"userscript","path":"api/categories/userscript.json"}],"tags":[{"name":"javascript","path":"api/tags/javascript.json"},{"name":"userscript","path":"api/tags/userscript.json"},{"name":"pixiv","path":"api/tags/pixiv.json"}]}