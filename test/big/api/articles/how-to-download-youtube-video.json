{"title":"如何下載 YouTube 影片 (原理)","slug":"how-to-download-youtube-video","date":"2018-05-05T14:38:37.000Z","updated":"2019-08-16T11:14:47.587Z","comments":true,"path":"api/articles/how-to-download-youtube-video.json","excerpt":"只要 google YouTube 下載 隨便就能找到很多網站讓你能下載影片<br>不過我不久前就很好奇要怎樣才能取得 yt 影片的真實網站，因此就花了點時間去研究原理而我最後把它做成一個簡單的 api 伺服器，改一下應該也能當成 npm module 來發布<br>GitHub: maple3142/ytdl而這篇文章會簡單的講是怎麼下載 yt 影片的","covers":["devtool.png","devtool_old.png","npp.png"],"content":"<p>只要 google <strong>YouTube 下載</strong> 隨便就能找到很多網站讓你能下載影片<br>不過我不久前就很好奇要怎樣才能取得 yt 影片的真實網站，因此就花了點時間去研究原理</p>\n<p>而我最後把它做成一個簡單的 api 伺服器，改一下應該也能當成 npm module 來發布<br>GitHub: <a href=\"https://github.com/maple3142/ytdl\" target=\"_blank\" rel=\"noopener\">maple3142/ytdl</a></p>\n<p>而這篇文章會簡單的講是怎麼下載 yt 影片的</p>\n<a id=\"more\"></a>\n\n<h1 id=\"取得影片資訊\"><a href=\"#取得影片資訊\" class=\"headerlink\" title=\"取得影片資訊\"></a>取得影片資訊</h1><p>YouTube 官方有個 api 叫 <code>get_video_info</code> 可以取得一些影片的資訊，裡面當然也包括了影片網址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.youtube.com/get_video_info?video_id=VIDEOID&amp;el=embedded&amp;ps=default&amp;eurl=&amp;gl=US&amp;hl=en</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>裡面的 <code>VIDEOID</code> 是指影片的 id<br>例如 <code>https://www.youtube.com/watch?v=-tKVN2mAKRI</code> 的 id 是 <code>-tKVN2mAKRI</code></p>\n</blockquote>\n<p>在裡面會得到一串奇怪的文字，不過它的格式實際上就是 querystring 的格式<br>像是 <code>key=value&amp;key2=value2</code> 之類的</p>\n<p>而在解析出來的物件中會得到許多 key-value pair，其中兩個需要用到的是 <code>url_encoded_fmt_stream_map</code> 和 <code>adaptive_fmts</code></p>\n<p><code>url_encoded_fmt_stream_map</code> 中是一個使用 <code>,</code> 分隔的字串，其中每個片段又是一個 querystring<br>格式<strong>大概</strong>如下:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"sp\"</span>: <span class=\"string\">\"signature\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"quality\"</span>: <span class=\"string\">\"hd720\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"itag\"</span>: <span class=\"string\">\"22\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"https://....\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"video/mp4;+codecs=\\\"avc1.64001F,+mp4a.40.2\\\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"s\"</span>: <span class=\"string\">\"XXXXXXXXXXXXX\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中有 url，你可能會很直接的以為那個 url 就是真實的的影片網址<br>不過他在 <code>sp</code> 中沒有 <code>signature</code> 時確實就是真實的影片網址，但是如果有的話你會得到 http code 403<br>這是因為有 <code>signature</code> 表示這個影片是有加密的，被加密過的字串就是其中的 <code>s</code>，而關於解密部分會在下面講</p>\n<p>而我上面說的 <code>adaptive_fmts</code> 的格式其實和 <code>url_encoded_fmt_stream_map</code> 是一樣的，不過它的內容是不一樣的<br>裡面都是一些沒有聲音的影片和純音樂檔，是代表著分離的影片與音樂</p>\n<p>而關於要怎麼 parse 這些資料的範例可以參考: <a href=\"https://github.com/maple3142/ytdl/blob/master/getvid.js\" target=\"_blank\" rel=\"noopener\">getvid.js</a></p>\n<h1 id=\"解密-signature\"><a href=\"#解密-signature\" class=\"headerlink\" title=\"解密 signature\"></a>解密 signature</h1><h2 id=\"取得原始碼\"><a href=\"#取得原始碼\" class=\"headerlink\" title=\"取得原始碼\"></a>取得原始碼</h2><p>打開任何一個 yt 影片然後打開 devtool(開發人員工具) ，然後找到一個在 player 底下的 <code>base.js</code> 或是一個檔案名稱是 <code>data:</code> 開頭的檔案可能會看到下面這樣</p>\n<p><img src=\"devtool.png\" alt=\"devtool\"></p>\n<p>實際的程式碼被放在一個 <code>&lt;script&gt;</code> 中，這樣的話去取得該程式碼然後另外丟到一些 beautifier 去排版</p>\n<blockquote>\n<p>如果你看到的程式碼並沒透過 <code>&lt;script&gt;</code> 包著的話可以直接按左下 format</p>\n</blockquote>\n<h2 id=\"尋找解密函數\"><a href=\"#尋找解密函數\" class=\"headerlink\" title=\"尋找解密函數\"></a>尋找解密函數</h2><details><summary>舊的做法</summary><p>在裡面搜尋 <code>signature</code>，在第一個 match 能看到像是下面的函數，其中的 <code>Ty</code> 函數(也有可能是其他名稱)就是解密 <code>signature</code> 的函數了~~</p>\n<p><img src=\"devtool_old.png\" alt=\"old devtool\"></p>\n</details>\n\n<details open><summary>新的做法</summary><p>在裡面搜尋 <code>akamaized</code> 會看到下面這樣:</p>\n<p><img src=\"npp.png\" alt=\"npp\"></p>\n<p>其中的 <code>nv</code> 函數就是解密函數了，至於找到這個的方法就複雜多了，原則上是利用舊方法結合 breakpoint 找到的</p>\n</details>\n\n<p>找到解密函數名稱之後再找一下就能找到像是下面的函數了，這就是解密函數的本體</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nv = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">  a = a.split(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">  mv.Ym(a, <span class=\"number\">54</span>);</span><br><span class=\"line\">  mv.Ym(a, <span class=\"number\">25</span>);</span><br><span class=\"line\">  mv.gJ(a, <span class=\"number\">1</span>);</span><br><span class=\"line\">  mv.TY(a, <span class=\"number\">21</span>);</span><br><span class=\"line\">  mv.Ym(a, <span class=\"number\">62</span>);</span><br><span class=\"line\">  mv.Ym(a, <span class=\"number\">35</span>);</span><br><span class=\"line\">  mv.Ym(a, <span class=\"number\">17</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.join(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解密函數的-helper\"><a href=\"#解密函數的-helper\" class=\"headerlink\" title=\"解密函數的 helper\"></a>解密函數的 helper</h2><p>其中會看到一個東西叫 <code>mv</code>，同樣可以透過搜尋找到它的定義，應該會長成像下面這樣:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mv = &#123;</span><br><span class=\"line\">  gJ: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    a.splice(<span class=\"number\">0</span>, b)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  Ym: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = a[<span class=\"number\">0</span>];</span><br><span class=\"line\">    a[<span class=\"number\">0</span>] = a[b % a.length];</span><br><span class=\"line\">    a[b % a.length] = c</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  TY: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    a.reverse()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>這個其實就是解密函數所需的一些輔助工具 (helper)，將他們兩個結合就能拿來解密 <code>signature</code> 了</p>\n<p>然後在 <code>url</code> 後面加上 <code>&amp;signature=解密後的signature</code> 就是真正的網址，可以用瀏覽器直接瀏覽看看</p>\n<p>不過這東西並不是只做一次就好，因為這個加密方法還不時會更改，當你發現解密後還是失效時就請重新尋找解密函數</p>\n<p>但是我有點懶，所以我就用 js 模擬了我剛做的所有事情，來幫我自動找出解密函數: <a href=\"https://github.com/maple3142/ytdl/blob/master/decsig.js\" target=\"_blank\" rel=\"noopener\">decsig.js</a></p>\n","more":"<h1 id=\"取得影片資訊\"><a href=\"#取得影片資訊\" class=\"headerlink\" title=\"取得影片資訊\"></a>取得影片資訊</h1><p>YouTube 官方有個 api 叫 <code>get_video_info</code> 可以取得一些影片的資訊，裡面當然也包括了影片網址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.youtube.com/get_video_info?video_id=VIDEOID&amp;el=embedded&amp;ps=default&amp;eurl=&amp;gl=US&amp;hl=en</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>裡面的 <code>VIDEOID</code> 是指影片的 id<br>例如 <code>https://www.youtube.com/watch?v=-tKVN2mAKRI</code> 的 id 是 <code>-tKVN2mAKRI</code></p>\n</blockquote>\n<p>在裡面會得到一串奇怪的文字，不過它的格式實際上就是 querystring 的格式<br>像是 <code>key=value&amp;key2=value2</code> 之類的</p>\n<p>而在解析出來的物件中會得到許多 key-value pair，其中兩個需要用到的是 <code>url_encoded_fmt_stream_map</code> 和 <code>adaptive_fmts</code></p>\n<p><code>url_encoded_fmt_stream_map</code> 中是一個使用 <code>,</code> 分隔的字串，其中每個片段又是一個 querystring<br>格式<strong>大概</strong>如下:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"sp\"</span>: <span class=\"string\">\"signature\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"quality\"</span>: <span class=\"string\">\"hd720\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"itag\"</span>: <span class=\"string\">\"22\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"https://....\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"video/mp4;+codecs=\\\"avc1.64001F,+mp4a.40.2\\\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"s\"</span>: <span class=\"string\">\"XXXXXXXXXXXXX\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中有 url，你可能會很直接的以為那個 url 就是真實的的影片網址<br>不過他在 <code>sp</code> 中沒有 <code>signature</code> 時確實就是真實的影片網址，但是如果有的話你會得到 http code 403<br>這是因為有 <code>signature</code> 表示這個影片是有加密的，被加密過的字串就是其中的 <code>s</code>，而關於解密部分會在下面講</p>\n<p>而我上面說的 <code>adaptive_fmts</code> 的格式其實和 <code>url_encoded_fmt_stream_map</code> 是一樣的，不過它的內容是不一樣的<br>裡面都是一些沒有聲音的影片和純音樂檔，是代表著分離的影片與音樂</p>\n<p>而關於要怎麼 parse 這些資料的範例可以參考: <a href=\"https://github.com/maple3142/ytdl/blob/master/getvid.js\" target=\"_blank\" rel=\"noopener\">getvid.js</a></p>\n<h1 id=\"解密-signature\"><a href=\"#解密-signature\" class=\"headerlink\" title=\"解密 signature\"></a>解密 signature</h1><h2 id=\"取得原始碼\"><a href=\"#取得原始碼\" class=\"headerlink\" title=\"取得原始碼\"></a>取得原始碼</h2><p>打開任何一個 yt 影片然後打開 devtool(開發人員工具) ，然後找到一個在 player 底下的 <code>base.js</code> 或是一個檔案名稱是 <code>data:</code> 開頭的檔案可能會看到下面這樣</p>\n<p><img src=\"devtool.png\" alt=\"devtool\"></p>\n<p>實際的程式碼被放在一個 <code>&lt;script&gt;</code> 中，這樣的話去取得該程式碼然後另外丟到一些 beautifier 去排版</p>\n<blockquote>\n<p>如果你看到的程式碼並沒透過 <code>&lt;script&gt;</code> 包著的話可以直接按左下 format</p>\n</blockquote>\n<h2 id=\"尋找解密函數\"><a href=\"#尋找解密函數\" class=\"headerlink\" title=\"尋找解密函數\"></a>尋找解密函數</h2><details><summary>舊的做法</summary><p>在裡面搜尋 <code>signature</code>，在第一個 match 能看到像是下面的函數，其中的 <code>Ty</code> 函數(也有可能是其他名稱)就是解密 <code>signature</code> 的函數了~~</p>\n<p><img src=\"devtool_old.png\" alt=\"old devtool\"></p>\n</details>\n\n<details open><summary>新的做法</summary><p>在裡面搜尋 <code>akamaized</code> 會看到下面這樣:</p>\n<p><img src=\"npp.png\" alt=\"npp\"></p>\n<p>其中的 <code>nv</code> 函數就是解密函數了，至於找到這個的方法就複雜多了，原則上是利用舊方法結合 breakpoint 找到的</p>\n</details>\n\n<p>找到解密函數名稱之後再找一下就能找到像是下面的函數了，這就是解密函數的本體</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nv = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">  a = a.split(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">  mv.Ym(a, <span class=\"number\">54</span>);</span><br><span class=\"line\">  mv.Ym(a, <span class=\"number\">25</span>);</span><br><span class=\"line\">  mv.gJ(a, <span class=\"number\">1</span>);</span><br><span class=\"line\">  mv.TY(a, <span class=\"number\">21</span>);</span><br><span class=\"line\">  mv.Ym(a, <span class=\"number\">62</span>);</span><br><span class=\"line\">  mv.Ym(a, <span class=\"number\">35</span>);</span><br><span class=\"line\">  mv.Ym(a, <span class=\"number\">17</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.join(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解密函數的-helper\"><a href=\"#解密函數的-helper\" class=\"headerlink\" title=\"解密函數的 helper\"></a>解密函數的 helper</h2><p>其中會看到一個東西叫 <code>mv</code>，同樣可以透過搜尋找到它的定義，應該會長成像下面這樣:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mv = &#123;</span><br><span class=\"line\">  gJ: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    a.splice(<span class=\"number\">0</span>, b)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  Ym: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = a[<span class=\"number\">0</span>];</span><br><span class=\"line\">    a[<span class=\"number\">0</span>] = a[b % a.length];</span><br><span class=\"line\">    a[b % a.length] = c</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  TY: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    a.reverse()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>這個其實就是解密函數所需的一些輔助工具 (helper)，將他們兩個結合就能拿來解密 <code>signature</code> 了</p>\n<p>然後在 <code>url</code> 後面加上 <code>&amp;signature=解密後的signature</code> 就是真正的網址，可以用瀏覽器直接瀏覽看看</p>\n<p>不過這東西並不是只做一次就好，因為這個加密方法還不時會更改，當你發現解密後還是失效時就請重新尋找解密函數</p>\n<p>但是我有點懶，所以我就用 js 模擬了我剛做的所有事情，來幫我自動找出解密函數: <a href=\"https://github.com/maple3142/ytdl/blob/master/decsig.js\" target=\"_blank\" rel=\"noopener\">decsig.js</a></p>","categories":[{"name":"研究","path":"api/categories/研究.json"}],"tags":[{"name":"javascript","path":"api/tags/javascript.json"},{"name":"download","path":"api/tags/download.json"},{"name":"youtube","path":"api/tags/youtube.json"}]}