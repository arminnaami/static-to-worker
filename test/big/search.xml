<?xml version="1.0" encoding="utf-8"?><search><entry><title>EPUB/TXT 繁簡轉換</title><link href="/2019/09/12/ebook-converter/"/><url>/2019/09/12/ebook-converter/</url><content type="html"><![CDATA[<p>這是個簡單的網頁小工具，可幫助你線上轉換 Epub 或 Txt 檔案的文字內容為繁體或簡體</p><p>網址在此: <a href="https://ebook-converter.maple3142.net/" target="_blank" rel="noopener">https://ebook-converter.maple3142.net/</a></p><p>此工具的繁簡轉換能力是由強大的 <a href="https://github.com/BYVoid/OpenCC" target="_blank" rel="noopener">OpenCC</a> 所提供的，而這個網站的原始碼也有以 MIT 發佈在 GitHub 上</p><p><a href="https://github.com/maple3142/ebook-converter" target="_blank" rel="noopener">maple3142/ebook-converter</a></p>]]></content><categories><category> 專案 </category></categories><tags><tag> tools </tag><tag> Chinese </tag><tag> epub </tag><tag> txt </tag></tags></entry><entry><title>khinsider 批量下載器</title><link href="/2019/08/21/khinsider-batch-downloader/"/><url>/2019/08/21/khinsider-batch-downloader/</url><content type="html"><![CDATA[<p><a href="https://downloads.khinsider.com/" target="_blank" rel="noopener">khinsider</a> 是一個提供許多遊戲 OST 下載與試聽的網站，也提供許多免費單曲下載<br>不過下載整張專輯的功能是需要 donate 的，因此就弄了一個簡單的腳本來批量下載<br>下載連結: <a href="https://greasyfork.org/zh-TW/scripts/37314-video-game-music-batch-downloader" target="_blank" rel="noopener">Greasy Fork</a></p><blockquote><p>我之所以知道這個網站是為了下載整張<a href="http://store.steampowered.com/app/351640/Eternal_Senia/" target="_blank" rel="noopener">永恆的賽妮亞</a>的 OST</p><p>這遊戲也是不錯的遊戲，有興趣可以玩玩看</p></blockquote><a id="more"></a><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>安裝完上面的腳本之後到 <a href="https://downloads.khinsider.com/" target="_blank" rel="noopener">khinsider</a> 網站上找到你喜歡的遊戲這篇文章以<a href="https://downloads.khinsider.com/game-soundtracks/album/eternal-senia" target="_blank" rel="noopener">永恆的賽妮亞</a>作為範例<br><img src="eternal_senia_ostpage.png" alt="Eternal Senia OST page"></p><p>按下圖片中的 <strong>click to download</strong> 然後右邊會出現一個進度條建議瀏覽器留在這個分頁，因為同時瀏覽其他分頁時可能會卡卡的(Firefox)<br><img src="downloading.png" alt="Album Downloading"></p><p>等進度條跑到滿之後瀏覽器應該會自動觸發下載，檔案名=[遊戲名稱].zip<br>把 zip 用 7zip,winrar 之類的程式打開裡面就會有你想要的音樂了<br><img src="zip.png" alt="zip"></p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>直接點擊下方的任何一首音樂就會進入到音樂的下載頁面，而下載頁面上有連結然後用<code>ajax</code>的方式去把檔案存在記憶體成<code>Blob</code>的格式最後用 <a href="https://stuk.github.io/jszip/" target="_blank" rel="noopener">JSZip</a> 把檔案包裝成 zip 檔</p><p>程式碼: <a href="https://greasyfork.org/zh-TW/scripts/37314-video-game-music-batch-downloader/code" target="_blank" rel="noopener">Greasy Fork</a></p><h2 id="downloadblob"><a href="#downloadblob" class="headerlink" title="downloadblob"></a>downloadblob</h2><p>因為網站本身在<code>https://downloads.khinsider.com/</code>上，屬於 https<br>而存放音樂的伺服器在<code>http://66.90.93.122/</code>上，屬於 http<br>因為 protocol 不同的關係不符合同源政策所以沒辦法直接用一般的<code>XMLHttpRequest</code>和<code>fetch</code><br>需要使用腳本管理器提供的<code>GM_xmlhttpRequest</code>來做請求</p><p>函數也很簡單，就是給 url 然後回傳一個<code>Promise&lt;Blob&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @grant        GM_xmlhttpRequest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//something...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">downloadblob</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span><span class="keyword">new</span><span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    GM_xmlhttpRequest(&#123;</span><br><span class="line">      method: <span class="string">'GET'</span>,</span><br><span class="line">      url,</span><br><span class="line">      responseType: <span class="string">'blob'</span>,</span><br><span class="line">      onload: <span class="function"><span class="params">res</span> =&gt;</span> resolve(res.response)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主程式"><a href="#主程式" class="headerlink" title="主程式"></a>主程式</h2><p>在原本就有的 <code>click to download</code> 連結上綁<code>click</code>事件並取消它，然後顯示進度條接下來取得遊戲名稱和各首歌下載頁面的網址用<code>fetch</code>去抓下載頁面，並且用<code>jquery</code>在上面找出<code>mp3</code>的真實連結再來把把真實連結轉成<code>{blob: Promise&lt;Blob&gt;,name: String}</code>的物件，用<code>reduce</code>去加入<code>JSZip</code> (<code>JSZip</code>支援<code>Promise</code>)<br>而<code>JSZip</code>有支援進度，在有進度時就更新前面的<code>&lt;progress&gt;</code><br>最後在下載完成時把整個<code>zip</code>的<code>Blob</code>弄成 url 並觸發下載就完成了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'a:contains("click to download")'</span>).on(<span class="string">'click'</span>, e =&gt; &#123;</span><br><span class="line">  e.preventDefault()</span><br><span class="line">  $(<span class="string">'.albumMassDownload'</span>).append(<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;span&gt;Download progress:&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;progress min="0" max="100" id="dp" value="0"&gt;&lt;/progress&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = $(<span class="string">'h2'</span>)[<span class="number">0</span>].textContent</span><br><span class="line"><span class="keyword">const</span> urls = $(<span class="string">'tr&gt;td.clickable-row:not([align])'</span>)</span><br><span class="line">    .toArray()</span><br><span class="line">    .map(<span class="function"><span class="params">el</span> =&gt;</span></span><br><span class="line">      $(el)</span><br><span class="line">        .find(<span class="string">'a'</span>)</span><br><span class="line">        .attr(<span class="string">'href'</span>)</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">const</span> requests = urls.map(<span class="function"><span class="params">e</span> =&gt;</span> fetch(e).then(<span class="function"><span class="params">r</span> =&gt;</span> r.text()))</span><br><span class="line"><span class="built_in">Promise</span>.all(requests).then(<span class="function"><span class="params">ar</span> =&gt;</span></span><br><span class="line">    ar</span><br><span class="line">      .map(<span class="function"><span class="params">ht</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> url = $(ht)</span><br><span class="line">          .find(<span class="string">'a:contains("Click here to download as MP3")'</span>)</span><br><span class="line">          .attr(<span class="string">'href'</span>)</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">          blob: downloadblob(url),</span><br><span class="line">          name: <span class="built_in">decodeURIComponent</span>(url.split(<span class="string">'/'</span>).pop())</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .reduce(<span class="function">(<span class="params">zip, file</span>) =&gt;</span> &#123;</span><br><span class="line">        zip.file(file.name, file.blob)</span><br><span class="line"><span class="keyword">return</span> zip</span><br><span class="line">      &#125;, <span class="keyword">new</span> JSZip())</span><br><span class="line">      .generateAsync(&#123; <span class="attr">type</span>: <span class="string">'blob'</span> &#125;, meta =&gt; &#123;</span><br><span class="line">        $(<span class="string">'#dp'</span>).attr(<span class="string">'value'</span>, <span class="built_in">parseInt</span>(meta.percent))</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function"><span class="params">blob</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> url = URL.createObjectURL(blob)</span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">        a.download = title + <span class="string">'.zip'</span></span><br><span class="line">        a.href = url</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(a)</span><br><span class="line">        a.click()</span><br><span class="line">        a.remove()</span><br><span class="line">        URL.revokeObjectURL(url)</span><br><span class="line">      &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content><categories><category> userscript </category></categories><tags><tag> javascript </tag><tag> userscript </tag></tags></entry><entry><title>輕量的 Google Analytics</title><link href="/2019/08/19/lightweight-google-analytics/"/><url>/2019/08/19/lightweight-google-analytics/</url><content type="html"><![CDATA[<p>Google Analytics 是個很知名的網頁資料分析工具，加入到網頁的方法也很簡單，只需要貼上幾個 <code>&lt;script&gt;</code> 到 html 中就好了。不過對於一些有對自己網站使用一些檢測工具的人來說可能會發現這其實是個效能殺手，主要是它 Headers 中的快取時間很短，而腳本大小又蠻大的</p><p>對此，我之前就有想過到底要不要放 Google Analytics 在目前這個網頁上，一方面是想知道訪客主要都瀏覽哪些文章，但又不想讓這個網頁太過肥大、緩慢。後來經過我的一些研究後，發現原來 Google Analytics 有提供 api 讓使用者發送統計資料，不需要官方的 script 就能運作了</p><a id="more"></a><h1 id="用-Measurement-Protocol-來發送資訊"><a href="#用-Measurement-Protocol-來發送資訊" class="headerlink" title="用 Measurement Protocol 來發送資訊"></a>用 Measurement Protocol 來發送資訊</h1><p><a href="https://developers.google.com/analytics/devguides/collection/protocol/v1/reference" target="_blank" rel="noopener">Measurement Protocol</a> 是 Google Analytics 提供的 api，可供使用者手動發送一些統計資料</p><p>使用方法就是發送一個 <code>POST</code>(推薦) 或 <code>GET</code> 請求到 <code>https://www.google-analytics.com/collect</code> 就好了</p><p>例如下面這個是此網頁發送資訊給 Google Analytics 的 code:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uid = localStorage.getItem(<span class="string">'uid'</span>) || (<span class="built_in">Math</span>.random() + <span class="string">'.'</span> + <span class="built_in">Math</span>.random())</span><br><span class="line">localStorage.setItem(<span class="string">'uid'</span>, uid)</span><br><span class="line">$.post(<span class="string">'https://www.google-analytics.com/collect'</span>, &#123;</span><br><span class="line">  v: <span class="number">1</span>,</span><br><span class="line">  tid: <span class="string">'UA-xxxxxxxxx-x'</span>,</span><br><span class="line">  cid: uid,</span><br><span class="line">  t: <span class="string">'pageview'</span>,</span><br><span class="line">  dp: <span class="built_in">encodeURIComponent</span>(location.pathname)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>裡面的參數分別是:</p><ul><li><code>v</code>: api protocol 版本的編號，目前只有 <code>1</code> 能用而已</li><li><code>tid</code>: 一般使用 GA 時會用到的 <code>UA-xxxxxxxxx-x</code> 編號</li><li><code>cid</code>: 一個<strong>獨一無二</strong>的 ID，用來辨識使用者的</li><li><code>t</code>: 資訊的種類，如 <code>pageview</code> 是指網頁瀏覽，全部的種類可以參考<a href="https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#t" target="_blank" rel="noopener">這邊</a></li><li><code>dp</code>: 指網址的 <strong>path</strong> 部分，不含 hostname querystring 之類的部分</li></ul><p>這些參數可以根據自己的需求與 <a href="https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters" target="_blank" rel="noopener">Parameter Reference</a> 中寫的去修改，像我只用這些參數是因為我也只需要知道這些</p><h1 id="關於廣告阻擋器"><a href="#關於廣告阻擋器" class="headerlink" title="關於廣告阻擋器"></a>關於廣告阻擋器</h1><p>有些人可能會在想這會不會被廣告阻擋器阻擋，答案是<strong>肯定</strong>的，因為資訊的傳送目標是 <code>www.google-analytics.com</code>，所以這基本上會被絕大多數的 adblocker 所阻擋</p><p>當然有人可能會想可以弄個 reverse proxy 架在自己的伺服上，把 <code>/collect</code> 的 url 改到自己的 server 然後把真實 ip 加到 <code>uip</code> 參數去再傳給 GA 的伺服器，理論上這應該可行(我沒試過)，但我認為沒必要硬去收集不想被收集資料的人的資料</p>]]></content><categories><category> 教學 </category></categories><tags><tag> javascript </tag><tag> Google Analytics </tag></tags></entry><entry><title>用過的 VPS 的一些經驗與評價</title><link href="/2019/07/25/vps-experiences/"/><url>/2019/07/25/vps-experiences/</url><content type="html"><![CDATA[<blockquote><p>本文會不斷的根據我的體驗來更新，評價也都是很主觀的</p></blockquote><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我開始研究 VPS 是從開始使用 <a href="https://cloud.google.com/free/?hl=zh-TW" target="_blank" rel="noopener">GCP 的一年 300USD</a> 免費體驗開始的，目前(2019/07)在上面用它的 Cloud Compute 於台灣機房架了 Minecraft 伺服器</p><p>不過我發現 GCP 的價格相當的昂貴，那 300USD 的消耗速度相當的快，預計最多能撐 2~3 個月。因此我就順便研究了一下有沒有比較低價的 VPS (最好能試用)能開 Minecraft 伺服器</p><h1 id="Linode"><a href="#Linode" class="headerlink" title="Linode"></a>Linode</h1><p>這家算是相當有名的一家 VPS，價格最低的有 5USD 的，在亞洲有日本、新加坡與印度可選</p><p>目前(2019/07)使用 <code>podcastinit2019</code> 為 Promo Code 去註冊可以拿到 20USD 的額度來用，可用期限到年底</p><blockquote><p><a href="https://www.linode.com/?r=33751faec2100c8a88434cb1b4d6f4f0f68cd658" target="_blank" rel="noopener">點此註冊</a> (有我的推薦)</p></blockquote><p>我目前主要有把我先前架設的 <a href="/2018/04/05/deploy-tieba-cloud-sign/">BDTCS 貼吧雲簽到系統</a> 移動到這邊的 5USD/Month 日本 VPS，在上面放熊貓網的 <a href="https://e-hentai.org/hentaiathome.php" target="_blank" rel="noopener">Hentai@Home</a> 以及架 <a href="https://getoutline.org/zh-TW/home" target="_blank" rel="noopener">Outline VPN</a></p><p>到目前為止我的體驗都還蠻不錯的，網路穩定快速、客服品質也很好，蠻值得使用下去的。不過要注意的是它的日本機房從台灣 Ping 過去的效果不是很好，基本上只適合放網站而不適合當 Minecraft server</p><p><img src="linode_ping.png" alt="Linode Ping"></p><h2 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a>Benchmark</h2><p><code>wget -qO- bench.sh | bash</code></p><p><img src="linode_bench.png" alt="Linode Benchmark"></p><h1 id="Google-Cloud-Platform-Cloud-Compute"><a href="#Google-Cloud-Platform-Cloud-Compute" class="headerlink" title="Google Cloud Platform: Cloud Compute"></a>Google Cloud Platform: Cloud Compute</h1><p>這個和其他普通 VPS 比起來價格相當的貴，不過促使我去使用它的原因是因為有<a href="https://cloud.google.com/free/?hl=zh-TW" target="_blank" rel="noopener">免費的 300USD</a> 以及台灣機房 (ping~20)</p><p>我有在上面開 (4CPU+4GB RAM+50GB SSD) 的主機兩個禮拜左右，後來覺得因為伺服器玩的人沒很多所以把它降到 (2CPU+3GB RAM+25GB SSD) 的規格了。GCP 可以讓你很自由的升/降級 RAM 和 CPU，但 SSD 不行，所以我是另外開一台 VM 然後用 rsync 把伺服器資料轉過去才成功降級的。</p><p>這個是目前的花費: (兩周高級版+兩天降級後的伺服器)</p><p><img src="gcp_pricing.png" alt="GCP Pricing"></p><h2 id="Benchmark-1"><a href="#Benchmark-1" class="headerlink" title="Benchmark"></a>Benchmark</h2><p><code>wget -qO- bench.sh | bash</code></p><p><img src="gcp_bench.png" alt="GCP Benchmark"></p><h1 id="HostHatch"><a href="#HostHatch" class="headerlink" title="HostHatch"></a>HostHatch</h1><p>這家的名氣相對於前面兩家小非常多，不過我認為它的價格相當的實惠，便宜又大碗，還有香港的機房可以選</p><blockquote><p><a href="https://hosthatch.com/a?id=1489" target="_blank" rel="noopener">點此註冊</a> (有我的推薦)</p></blockquote><p>它有分三種主機可以選，KVM OpenVZ Storage，前兩個都是 SSD 的，但 OpenVZ 便宜比 KVM 便宜不少(原因可以 Google 一下)。而後面的 Storage 使用的是 HDD，不過空間也給很大，比較適合拿來放備份的東西，或是架設 <a href="https://nextcloud.com/" target="_blank" rel="noopener">Nextcloud</a> 之類的雲端硬碟。</p><p>目前我是有購買它 4USD/Month 的 OpenVZ 主機，主要是要拿來掛 Hentai@Home 賺 Hath 用的，因為它的空間和流量大小都比 Linode 5USD/Month 好</p><p>另外，這家值得一提的是它從台灣去的 Ping 蠻低的，我覺得算是可以架遊戲伺服器的考慮之一</p><p><img src="hosthatch_ping.png" alt="HostHatch Ping"></p><h2 id="Benchmark-2"><a href="#Benchmark-2" class="headerlink" title="Benchmark"></a>Benchmark</h2><p><code>wget -qO- bench.sh | bash</code></p><p><img src="hosthatch_bench.png" alt="HostHatch Benchmark"></p>]]></content><categories><category> 心得 </category></categories><tags><tag> free </tag><tag> vps </tag><tag> linux </tag><tag> server </tag></tags></entry><entry><title>推薦的 Magisk Modules</title><link href="/2019/04/05/recommended-magisk-modules/"/><url>/2019/04/05/recommended-magisk-modules/</url><content type="html"><![CDATA[<p>本文會推薦一些我目前正在使用的 Magisk Modules</p><p>提供一下我的手機型號與版本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">型號: POCOPHONE F1</span><br><span class="line">系統: Android 9.0 (RR-P-v7.0.1-20190404-beryllium-Official)</span><br><span class="line">CPU: Snapdragon 845 (ARMv8-A x64)</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="Blobmoji"><a href="#Blobmoji" class="headerlink" title="Blobmoji"></a>Blobmoji</h1><blockquote><p>Magisk Manager 即可下載</p></blockquote><p>這個可以把 Android 的 emoji 改成以前 7.x 的版本，圖片底部的那種可愛黃色小人就是了。</p><p><img src="blobmoji.jpg" alt="Blobmoji preview"></p><h1 id="Busybox-for-Android-NDK"><a href="#Busybox-for-Android-NDK" class="headerlink" title="Busybox for Android NDK"></a>Busybox for Android NDK</h1><blockquote><p>Magisk Manager 即可下載</p></blockquote><p>Busybox 只要玩過 Android 到一定程度應該都知道是要幹嘛的，主要是為了其他 app 及模組安裝的。</p><h1 id="Google-Lens-Enabler"><a href="#Google-Lens-Enabler" class="headerlink" title="Google Lens Enabler"></a>Google Lens Enabler</h1><blockquote><p>Magisk Manager 裡面沒有，而這是我所持有的一份 mirror: <a href="https://drive.google.com/file/d/1Uls2o8Xs8JNnV-AFElYlAjFRWZgk3GSr/view?usp=sharing" target="_blank" rel="noopener">Google Drive</a></p></blockquote><p>這個顧名思義可以知道它能開啟 Google 智慧鏡頭的功能，不過它有個額外的效果是能讓 Google Photos 有無限空間。(但我不曉得它是只能看還是真的有效)</p><p><img src="glens.jpg" alt="Google Lens Enabler preview"></p><h1 id="LKT"><a href="#LKT" class="headerlink" title="LKT"></a>LKT</h1><blockquote><p>Magisk Manager 即可下載</p></blockquote><p>一個調整 kernel 的模組，就我目前的使用經驗來說，它 Balanced Profile 的省電能力確實不錯。不過打高效能的遊戲的性能我就不清楚了，因為我玩的遊戲對於效能需求都不大。</p><p>此外，我還有為這模組開發一個管理器，能簡單的切換它內建的模式: <a href="https://github.com/maple3142/LKT-Manager" target="_blank" rel="noopener">LKT-Manager</a></p><p><img src="lktm.jpg" alt="LKT Manager"></p><h1 id="Magisk-Manager-for-Recovery-Mode-mm"><a href="#Magisk-Manager-for-Recovery-Mode-mm" class="headerlink" title="Magisk Manager for Recovery Mode (mm)"></a>Magisk Manager for Recovery Mode (mm)</h1><blockquote><p>Magisk Manager 即可下載，但建議使用 <strong>TWRP</strong> 而非 Manager 來安裝</p></blockquote><p>神器，想玩 Magisk 強烈建議一定要安裝的模組，可以在你因為 Magisk Modules 開不了機時救你一命。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>第一次請到 <strong>TWRP</strong> 刷它的 zip，然後可以在 TWRP 的 Terminal 中輸入 <code>mm</code> 試試看效果，功能都是互動式的操作的，英文也不難。</p><p>而當你再次需要這個工具時不用再刷一次，只要進 TWRP 的 Terminal 輸入 <code>/data/media/mm</code> 就能呼叫出它的功能了。</p><blockquote><p><strong>補充</strong> 如果你用的版本是 <strong>201904040</strong> 之後的版本，請把上面的 <code>/data/media/mm</code> 改為 <code>/sdcard/mm</code> 指令</p></blockquote><h1 id="Riru-Core"><a href="#Riru-Core" class="headerlink" title="Riru - Core"></a>Riru - Core</h1><blockquote><p>請到 GitHub 下載: <a href="https://github.com/RikkaApps/Riru/releases" target="_blank" rel="noopener">releases</a></p></blockquote><p>這個是其他某些模組所仰賴的一個核心，可以達成一些修改 Android 內部程式的功能，我下面介紹的幾個有 <code>Riru -</code> 開頭的模組都需要這個才能執行。</p><h1 id="Riru-Ed-Xposed"><a href="#Riru-Ed-Xposed" class="headerlink" title="Riru - Ed Xposed"></a>Riru - Ed Xposed</h1><blockquote><p>請到 GitHub 下載: <a href="https://github.com/ElderDrivers/EdXposed/releases" target="_blank" rel="noopener">releases</a>，並且請使用它裡面提供的 EdXposedInstaller 作為管理器</p></blockquote><p>給 Android Pie 使用的第三方 Xposed，需要上方的 <strong>Riru</strong> 才能執行<br>雖然官方有支援 Oreo 和 Pie，但是如果你是 Oreo 的使用者，還是建議用官方原版的</p><p><img src="edxp.jpg" alt="Ed Xposed status"><br><img src="edxp-modules.jpg" alt="Ed Xposed modules"></p><p>這個是我目前使用的效果以及能用的模組，效果都還不錯。不過這個最棒的點是它能<strong>通過 SafetyNet</strong>，這是官方原版所辦不到的事。<br>不過它也有些限制，就是它並不支援資源掛勾的功能(Resources Hook)，因此有些模組並不確保能夠使用。<br>此外，聽說在某些深度修改的 ROM 中可能會出問題，這個時候建議用我上方所提的 <strong>mm</strong> 把它移除，就能正常開機了。</p><h1 id="Riru-Storage-Redirect"><a href="#Riru-Storage-Redirect" class="headerlink" title="Riru - Storage Redirect"></a>Riru - Storage Redirect</h1><blockquote><p>下載地址請參考<a href="https://rikka.app/storage_redirect/docs/zh-TW/?doc=enhanced_mode&title=%E5%A2%9E%E5%BC%B7%E6%A8%A1%E5%BC%8F&night=1" target="_blank" rel="noopener">官方說明</a>服用</p></blockquote><p>這個是搭配另一個叫「<a href="https://play.google.com/store/apps/details?id=moe.shizuku.redirectstorage" target="_blank" rel="noopener">儲存重新導向</a>」的 app 的加強模組，如果你沒有使用的話就不用安裝這個模組了。至於用法，上方的說明也寫得很清楚了。</p><h1 id="Swift-Installer-Module"><a href="#Swift-Installer-Module" class="headerlink" title="Swift Installer Module"></a>Swift Installer Module</h1><blockquote><p>下載地址: <a href="https://goo.gl/dX5Yej" target="_blank" rel="noopener">官方</a></p></blockquote><p>這個是搭配另一個叫「<a href="https://play.google.com/store/apps/details?id=com.brit.swiftinstaller" target="_blank" rel="noopener">Swift Installer</a>」的 app 的加強模組，而它的功能是能為類原生的 ROM 上一層不錯的黑色系主題，而它的 Magisk Module 能讓它在 systemless 的狀態下運作，效果如下:</p><p><img src="swiftins.jpg" alt="Swift Installer effect"></p><h1 id="YouTube-Vanced-Magisk-Repo"><a href="#YouTube-Vanced-Magisk-Repo" class="headerlink" title="YouTube Vanced - Magisk Repo"></a>YouTube Vanced - Magisk Repo</h1><blockquote><p>Magisk Manager 即可下載</p></blockquote><p>這是知名的 YouTube 修改版 YouTube Vanced 的 Magisk 版本，和一般免 root 版本的主要差異是可以直接登入 Google 帳號，不需要 microg 這種額外的框架。<br>安裝完重新啟動後請到 Play 商店<strong>把 YouTube 的更新移除掉</strong>，這樣啟動後才能有 Vanced 版本的效果。<br>它的功能包含了去廣告、手機全畫質、滑動調音量等方便功能，詳細可以到<a href="https://youtubevanced.com/" target="_blank" rel="noopener">官網</a>看看，上面也有免 root 版可用。</p>]]></content><categories><category> android </category></categories><tags><tag> android </tag><tag> magisk </tag></tags></entry><entry><title>Pixiv 簡單存圖</title><link href="/2019/03/16/pixiv-easy-save-image/"/><url>/2019/03/16/pixiv-easy-save-image/</url><content type="html"><![CDATA[<p>這是一個在瀏覽器使用的使用者腳本，可以讓你簡單的在 <a href="https://www.pixiv.net/" target="_blank" rel="noopener">Pixiv</a> 上面存圖</p><h1 id="載點與原始碼"><a href="#載點與原始碼" class="headerlink" title="載點與原始碼"></a>載點與原始碼</h1><ul><li>GreasyFork: <a href="https://greasyfork.org/zh-TW/scripts/369930-pixiv-easy-save-image" target="_blank" rel="noopener">369930-pixiv-easy-save-image</a></li><li>GitHub: <a href="https://github.com/maple3142/browser-extensions/blob/master/scripts/pixiv-easy-save-image.user.js" target="_blank" rel="noopener">maple3142/browser-extensions pixiv-easy-save-image.user.js</a></li></ul><p>使用教學請點進上方的 GreasyFork 中閱讀，本文主要以介紹原理為主</p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ul><li>存單圖</li><li>存多圖為 zip</li><li>存漫畫為 zip</li><li>存動圖為 gif</li><li>自訂檔案名稱格式</li><li>存圖只需按一個鍵</li><li>支援多頁面，包括作品頁、首頁、收藏、搜尋等等…</li><li>與 <a href="https://github.com/FlandreDaisuki/Patchouli" target="_blank" rel="noopener">Patchouli</a> 腳本相容</li></ul><a id="more"></a><h1 id="架構"><a href="#架構" class="headerlink" title="架構"></a>架構</h1><p>以下是本腳本的基本執行流程:</p><blockquote><p>按下鍵盤的事件 -&gt; 取得目前選取的圖片 id -&gt; 取得圖片資訊 -&gt; 根據種類個別下載圖片</p></blockquote><h2 id="按下鍵盤並取得圖片-id"><a href="#按下鍵盤並取得圖片-id" class="headerlink" title="按下鍵盤並取得圖片 id"></a>按下鍵盤並取得圖片 id</h2><p>v0.6.0 的程式碼:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// key shortcut</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">const</span> SELECTOR_MAP = &#123;</span><br><span class="line"><span class="string">'/'</span>: <span class="string">'a.work:hover,a._work:hover,.illust-item-root&gt;a:hover'</span>,</span><br><span class="line"><span class="string">'/bookmark.php'</span>: <span class="string">'a.work:hover,.image-item-image&gt;a:hover'</span>,</span><br><span class="line"><span class="string">'/new_illust.php'</span>: <span class="string">'a.work:hover,.image-item-image&gt;a:hover'</span>,</span><br><span class="line"><span class="string">'/bookmark_new_illust.php'</span>: <span class="string">'figure&gt;div&gt;a:hover,.illust-item-root&gt;a:hover'</span>,</span><br><span class="line"><span class="string">'/member_illust.php'</span>: <span class="string">'div[role=presentation]&gt;a:hover,canvas:hover'</span>,</span><br><span class="line"><span class="string">'/ranking.php'</span>: <span class="string">'a.work:hover,.illust-item-root&gt;a:hover'</span>,</span><br><span class="line"><span class="string">'/search.php'</span>: <span class="string">'figure&gt;div&gt;a:hover'</span>,</span><br><span class="line"><span class="string">'/member.php'</span>: <span class="string">'[href^="/member_illust.php"]:hover,.illust-item-root&gt;a:hover'</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">const</span> selector = SELECTOR_MAP[location.pathname]</span><br><span class="line">  addEventListener(<span class="string">'keydown'</span>, e =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (e.which !== KEYCODE_TO_SAVE) <span class="keyword">return</span></span><br><span class="line">    e.preventDefault()</span><br><span class="line">    e.stopPropagation()</span><br><span class="line"><span class="keyword">let</span> id</span><br><span class="line"><span class="keyword">if</span> (!id &amp;&amp; $(<span class="string">'#Patchouli'</span>)) &#123;</span><br><span class="line"><span class="keyword">const</span> el = $(<span class="string">'.image-item-image:hover&gt;a'</span>)</span><br><span class="line"><span class="keyword">if</span> (!el) <span class="keyword">return</span></span><br><span class="line">      id = <span class="regexp">/\d+/</span>.exec(el.href.split(<span class="string">'/'</span>).pop())[<span class="number">0</span>]</span><br><span class="line">    &#125; <span class="keyword">else</span><span class="keyword">if</span> (<span class="keyword">typeof</span> selector === <span class="string">'string'</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> el = $(selector)</span><br><span class="line"><span class="keyword">if</span> (!el) <span class="keyword">return</span></span><br><span class="line"><span class="keyword">if</span> (el.href) id = <span class="regexp">/\d+/</span>.exec(el.href.split(<span class="string">'/'</span>).pop())[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">else</span> id = <span class="keyword">new</span> URLSearchParams(location.search).get(<span class="string">'illust_id'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      id = selector()</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span> (id) saveImage(FORMAT, id).catch(<span class="built_in">console</span>.error)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中可以很明顯的知道它在收到<code>keydown</code>的事件時先檢查是否與設定好的按鍵相符，不符則直接忽略</p><p>下方會根據目前的頁面從上面的<code>SELECTOR_MAP</code>取得特定得選擇器，而該選擇器都會選到正在<code>hover</code>狀態的<code>&lt;a&gt;</code>元素，並從其<code>href</code>中取得圖片的 id<br>而若是使用者有安裝 Patchouli 腳本，則會直接使用選擇器<code>.image-item-image:hover&gt;a</code>從它的圖片列表中選取圖片</p><p>在取得 id 後會直接呼叫<code>saveImage</code>函數去儲存圖片</p><h2 id="saveImage-函數"><a href="#saveImage-函數" class="headerlink" title="saveImage 函數"></a>saveImage 函數</h2><p>v0.6.0 的程式碼:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> saveImage = <span class="keyword">async</span> (&#123; single, multiple &#125;, id) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> illustData = <span class="keyword">await</span> getIllustData(id)</span><br><span class="line"><span class="keyword">let</span> results</span><br><span class="line"><span class="keyword">const</span> &#123; illustType &#125; = illustData</span><br><span class="line"><span class="keyword">switch</span> (illustType) &#123;</span><br><span class="line"><span class="keyword">case</span><span class="number">0</span>:</span><br><span class="line"><span class="keyword">case</span><span class="number">1</span>:</span><br><span class="line">      &#123;</span><br><span class="line"><span class="comment">// normal</span></span><br><span class="line"><span class="keyword">const</span> url = illustData.urls.original</span><br><span class="line"><span class="keyword">const</span> ext = url</span><br><span class="line">          .split(<span class="string">'/'</span>)</span><br><span class="line">          .pop()</span><br><span class="line">          .split(<span class="string">'.'</span>)</span><br><span class="line">          .pop()</span><br><span class="line"><span class="keyword">if</span> (illustData.pageCount === <span class="number">1</span>) &#123;</span><br><span class="line">          results = [[single(illustData) + <span class="string">'.'</span> + ext, <span class="keyword">await</span> getCrossOriginBlob(url)]]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">const</span> len = illustData.pageCount</span><br><span class="line"><span class="keyword">const</span> ar = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            ar.push(</span><br><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">                multiple(illustData, i) + <span class="string">'.'</span> + ext,</span><br><span class="line">                getCrossOriginBlob(url.replace(<span class="string">'p0'</span>, <span class="string">`p<span class="subst">$&#123;i&#125;</span>`</span>))</span><br><span class="line">              ])</span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br><span class="line">          results = <span class="keyword">await</span><span class="built_in">Promise</span>.all(ar)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">case</span><span class="number">2</span>: &#123;</span><br><span class="line"><span class="comment">// ugoira</span></span><br><span class="line"><span class="keyword">const</span> fname = single(illustData)</span><br><span class="line"><span class="keyword">const</span> numCpu = navigator.hardwareConcurrency || <span class="number">4</span></span><br><span class="line"><span class="keyword">const</span> gif = <span class="keyword">new</span> GIF(&#123; <span class="attr">workers</span>: numCpu * <span class="number">4</span>, <span class="attr">quality</span>: <span class="number">10</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> ugoiraMeta = <span class="keyword">await</span> getUgoiraMeta(id)</span><br><span class="line"><span class="keyword">const</span> ugoiraZip = <span class="keyword">await</span> xf.get(ugoiraMeta.originalSrc).blob()</span><br><span class="line"><span class="keyword">const</span> &#123; files &#125; = <span class="keyword">await</span> JSZip.loadAsync(ugoiraZip)</span><br><span class="line"><span class="keyword">const</span> gifFrames = <span class="keyword">await</span><span class="built_in">Promise</span>.all(<span class="built_in">Object</span>.values(files).map(<span class="function"><span class="params">f</span> =&gt;</span> f.async(<span class="string">'blob'</span>).then(blobToImg)))</span><br><span class="line"><span class="keyword">const</span> getGif = <span class="function">(<span class="params">data, frames</span>) =&gt;</span></span><br><span class="line"><span class="keyword">new</span><span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; frames.length; i++) &#123;</span><br><span class="line">            gif.addFrame(frames[i], &#123; <span class="attr">delay</span>: data.frames[i].delay &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">          gif.on(<span class="string">'finished'</span>, x =&gt; &#123;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'gif'</span>)</span><br><span class="line">            res(x)</span><br><span class="line">          &#125;)</span><br><span class="line">          gif.on(<span class="string">'error'</span>, rej)</span><br><span class="line">          gif.render()</span><br><span class="line">        &#125;)</span><br><span class="line">      results = <span class="keyword">await</span> [[fname + <span class="string">'.gif'</span>, <span class="keyword">await</span> getGif(ugoiraMeta, gifFrames)]]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">if</span> (results.length === <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> [f, blob] = results[<span class="number">0</span>]</span><br><span class="line">    downloadBlob(blob, f)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">const</span> zip = <span class="keyword">new</span> JSZip()</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [f, blob] <span class="keyword">of</span> results) &#123;</span><br><span class="line">      zip.file(f, blob)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">const</span> blob = <span class="keyword">await</span> zip.generateAsync(&#123; <span class="attr">type</span>: <span class="string">'blob'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> zipname = single(illustData)</span><br><span class="line">    downloadBlob(blob, zipname)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="取得圖片資訊"><a href="#取得圖片資訊" class="headerlink" title="取得圖片資訊"></a>取得圖片資訊</h3><p>這部分的程式碼被我寫成函數了，可以在 <a href="https://github.com/maple3142/browser-extensions/blob/c2d2760f4282d3ac5f1d67a3caf7ff82c05251b8/scripts/pixiv-easy-save-image.user.js#L90-L92" target="_blank" rel="noopener">L90-L92</a> 看到<br>它會發送<code>GET /ajax/illust/:id</code>形式的請求取得 json 格式的圖片資訊，並依照其中的<code>illustType</code>分類，<code>0</code>和<code>1</code>分別是插畫與漫畫，而<code>2</code>代表的是動圖<br>動圖方面則另外發送<code>GET /ajax/illust/:id/ugoira_meta</code>的請求取得資訊</p><h3 id="單圖、多圖與漫畫"><a href="#單圖、多圖與漫畫" class="headerlink" title="單圖、多圖與漫畫"></a>單圖、多圖與漫畫</h3><p>這在上方的<code>case 0:</code><code>case 1:</code>的部分</p><p>先從<code>illustData.urls.original</code>取得網址與副檔名，然後依照圖片數量選擇要呼叫<code>FORMAT.single</code>還是<code>FORMAT.multiple</code>得到檔案名稱，並將結果存到<code>results</code>陣列裡<br><code>results</code>陣列的格式大略為<code>Pair&lt;name,blobdata&gt;[]</code>，然後在下方依照其數量選擇直接下載或壓縮為<code>zip</code>再下載</p><blockquote><p>壓縮檔是使用 <a href="https://stuk.github.io/jszip/" target="_blank" rel="noopener">JSZip</a> 處裡的，支援壓縮和解壓縮</p></blockquote><h3 id="動圖"><a href="#動圖" class="headerlink" title="動圖"></a>動圖</h3><p>在<code>case 2:</code>的部分</p><p>這會先從<code>ugoiraMeta.originalSrc</code>取得一個壓縮檔的網址，然後取得其內容並將它解壓縮<br>再來會用額外的 <a href="https://jnordberg.github.io/gif.js/" target="_blank" rel="noopener">gif.js</a> 產生一個<code>GIF</code>的物件，其<code>workers</code>數量是 CPU 數量的四倍</p><p>再來後面會利用到解壓縮出來的檔案<code>frames</code>和各張圖所持續的時間資料<code>ugoiraMeta.frames</code>去呼叫<code>gif.addFrame</code>函數<br>當圖片處理好之後就直接回傳它的 blobdata 存到 <code>results</code> 陣列裡面，接下來做的事就和上面一樣了</p><h3 id="getCrossOriginBlob-函數"><a href="#getCrossOriginBlob-函數" class="headerlink" title="getCrossOriginBlob 函數"></a>getCrossOriginBlob 函數</h3><p>v0.6.0 的程式碼:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getCrossOriginBlob = <span class="function">(<span class="params">url, Referer = <span class="string">'https://www.pixiv.net/'</span></span>) =&gt;</span> gxf.get(url, &#123; <span class="attr">headers</span>: &#123; Referer &#125; &#125;).blob()</span><br></pre></td></tr></table></figure><p>其實可以發現我在抓圖片時會使用這個函數，原因是我需要取得圖片資料，但圖片的網域在<code>pximg.net</code>，直接發送請求會有同源政策的問題<br>而使用腳本管理器的跨域請求函數<code>GM_xmlhttpRequest</code>預設不會帶<code>Referer</code>，這又會導致<code>pximg.net</code>回傳<code>403 Forbidden</code></p><p>其中的<code>gxf</code>是結合 <a href="https://github.com/maple3142/gmxhr-fetch" target="_blank" rel="noopener">gmxhr-fetch</a> 和 <a href="https://github.com/maple3142/xfetch-js" target="_blank" rel="noopener">xfetch-js</a> 所產生出的物件，基本上就是一個跨域發 http 請求的 http client</p><h1 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h1><p>其實我發這篇文章是因為覺得太久發新文章了，之前不發新聞章是為了大學學測。但現在已經考完了，再不發真的說不過去…</p>]]></content><categories><category> userscript </category></categories><tags><tag> javascript </tag><tag> userscript </tag><tag> pixiv </tag></tags></entry><entry><title>如何下載 YouTube 影片 (原理)</title><link href="/2018/05/05/how-to-download-youtube-video/"/><url>/2018/05/05/how-to-download-youtube-video/</url><content type="html"><![CDATA[<p>只要 google <strong>YouTube 下載</strong> 隨便就能找到很多網站讓你能下載影片<br>不過我不久前就很好奇要怎樣才能取得 yt 影片的真實網站，因此就花了點時間去研究原理</p><p>而我最後把它做成一個簡單的 api 伺服器，改一下應該也能當成 npm module 來發布<br>GitHub: <a href="https://github.com/maple3142/ytdl" target="_blank" rel="noopener">maple3142/ytdl</a></p><p>而這篇文章會簡單的講是怎麼下載 yt 影片的</p><a id="more"></a><h1 id="取得影片資訊"><a href="#取得影片資訊" class="headerlink" title="取得影片資訊"></a>取得影片資訊</h1><p>YouTube 官方有個 api 叫 <code>get_video_info</code> 可以取得一些影片的資訊，裡面當然也包括了影片網址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.youtube.com/get_video_info?video_id=VIDEOID&amp;el=embedded&amp;ps=default&amp;eurl=&amp;gl=US&amp;hl=en</span><br></pre></td></tr></table></figure><blockquote><p>裡面的 <code>VIDEOID</code> 是指影片的 id<br>例如 <code>https://www.youtube.com/watch?v=-tKVN2mAKRI</code> 的 id 是 <code>-tKVN2mAKRI</code></p></blockquote><p>在裡面會得到一串奇怪的文字，不過它的格式實際上就是 querystring 的格式<br>像是 <code>key=value&amp;key2=value2</code> 之類的</p><p>而在解析出來的物件中會得到許多 key-value pair，其中兩個需要用到的是 <code>url_encoded_fmt_stream_map</code> 和 <code>adaptive_fmts</code></p><p><code>url_encoded_fmt_stream_map</code> 中是一個使用 <code>,</code> 分隔的字串，其中每個片段又是一個 querystring<br>格式<strong>大概</strong>如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"sp"</span>: <span class="string">"signature"</span>,</span><br><span class="line"><span class="attr">"quality"</span>: <span class="string">"hd720"</span>,</span><br><span class="line"><span class="attr">"itag"</span>: <span class="string">"22"</span>,</span><br><span class="line"><span class="attr">"url"</span>: <span class="string">"https://...."</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"video/mp4;+codecs=\"avc1.64001F,+mp4a.40.2\""</span>,</span><br><span class="line"><span class="attr">"s"</span>: <span class="string">"XXXXXXXXXXXXX"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中有 url，你可能會很直接的以為那個 url 就是真實的的影片網址<br>不過他在 <code>sp</code> 中沒有 <code>signature</code> 時確實就是真實的影片網址，但是如果有的話你會得到 http code 403<br>這是因為有 <code>signature</code> 表示這個影片是有加密的，被加密過的字串就是其中的 <code>s</code>，而關於解密部分會在下面講</p><p>而我上面說的 <code>adaptive_fmts</code> 的格式其實和 <code>url_encoded_fmt_stream_map</code> 是一樣的，不過它的內容是不一樣的<br>裡面都是一些沒有聲音的影片和純音樂檔，是代表著分離的影片與音樂</p><p>而關於要怎麼 parse 這些資料的範例可以參考: <a href="https://github.com/maple3142/ytdl/blob/master/getvid.js" target="_blank" rel="noopener">getvid.js</a></p><h1 id="解密-signature"><a href="#解密-signature" class="headerlink" title="解密 signature"></a>解密 signature</h1><h2 id="取得原始碼"><a href="#取得原始碼" class="headerlink" title="取得原始碼"></a>取得原始碼</h2><p>打開任何一個 yt 影片然後打開 devtool(開發人員工具) ，然後找到一個在 player 底下的 <code>base.js</code> 或是一個檔案名稱是 <code>data:</code> 開頭的檔案可能會看到下面這樣</p><p><img src="devtool.png" alt="devtool"></p><p>實際的程式碼被放在一個 <code>&lt;script&gt;</code> 中，這樣的話去取得該程式碼然後另外丟到一些 beautifier 去排版</p><blockquote><p>如果你看到的程式碼並沒透過 <code>&lt;script&gt;</code> 包著的話可以直接按左下 format</p></blockquote><h2 id="尋找解密函數"><a href="#尋找解密函數" class="headerlink" title="尋找解密函數"></a>尋找解密函數</h2><details><summary>舊的做法</summary><p>在裡面搜尋 <code>signature</code>，在第一個 match 能看到像是下面的函數，其中的 <code>Ty</code> 函數(也有可能是其他名稱)就是解密 <code>signature</code> 的函數了~~</p><p><img src="devtool_old.png" alt="old devtool"></p></details><details open><summary>新的做法</summary><p>在裡面搜尋 <code>akamaized</code> 會看到下面這樣:</p><p><img src="npp.png" alt="npp"></p><p>其中的 <code>nv</code> 函數就是解密函數了，至於找到這個的方法就複雜多了，原則上是利用舊方法結合 breakpoint 找到的</p></details><p>找到解密函數名稱之後再找一下就能找到像是下面的函數了，這就是解密函數的本體</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">nv = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  a = a.split(<span class="string">""</span>);</span><br><span class="line">  mv.Ym(a, <span class="number">54</span>);</span><br><span class="line">  mv.Ym(a, <span class="number">25</span>);</span><br><span class="line">  mv.gJ(a, <span class="number">1</span>);</span><br><span class="line">  mv.TY(a, <span class="number">21</span>);</span><br><span class="line">  mv.Ym(a, <span class="number">62</span>);</span><br><span class="line">  mv.Ym(a, <span class="number">35</span>);</span><br><span class="line">  mv.Ym(a, <span class="number">17</span>);</span><br><span class="line"><span class="keyword">return</span> a.join(<span class="string">""</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解密函數的-helper"><a href="#解密函數的-helper" class="headerlink" title="解密函數的 helper"></a>解密函數的 helper</h2><p>其中會看到一個東西叫 <code>mv</code>，同樣可以透過搜尋找到它的定義，應該會長成像下面這樣:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mv = &#123;</span><br><span class="line">  gJ: <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    a.splice(<span class="number">0</span>, b)</span><br><span class="line">  &#125;,</span><br><span class="line">  Ym: <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> c = a[<span class="number">0</span>];</span><br><span class="line">    a[<span class="number">0</span>] = a[b % a.length];</span><br><span class="line">    a[b % a.length] = c</span><br><span class="line">  &#125;,</span><br><span class="line">  TY: <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    a.reverse()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>這個其實就是解密函數所需的一些輔助工具 (helper)，將他們兩個結合就能拿來解密 <code>signature</code> 了</p><p>然後在 <code>url</code> 後面加上 <code>&amp;signature=解密後的signature</code> 就是真正的網址，可以用瀏覽器直接瀏覽看看</p><p>不過這東西並不是只做一次就好，因為這個加密方法還不時會更改，當你發現解密後還是失效時就請重新尋找解密函數</p><p>但是我有點懶，所以我就用 js 模擬了我剛做的所有事情，來幫我自動找出解密函數: <a href="https://github.com/maple3142/ytdl/blob/master/decsig.js" target="_blank" rel="noopener">decsig.js</a></p>]]></content><categories><category> 研究 </category></categories><tags><tag> javascript </tag><tag> download </tag><tag> youtube </tag></tags></entry><entry><title>架設百度貼吧雲簽到</title><link href="/2018/04/05/deploy-tieba-cloud-sign/"/><url>/2018/04/05/deploy-tieba-cloud-sign/</url><content type="html"><![CDATA[<p><a href="https://github.com/MoeNetwork/Tieba-Cloud-Sign" target="_blank" rel="noopener">百度貼吧雲簽到</a> 是一個開源的 php 程式，可以架設出一個自動簽到百度貼吧的系統</p><p>Google 到很多<code>貼吧 自動簽到</code>之類的網站很多都是用這個系統的</p><p>所以我就用 <a href="https://www.gearhost.com/" target="_blank" rel="noopener">GearHost</a> 的免費伺服器和資料庫就架了一個私人使用的簽到伺服器</p><a id="more"></a><p><img src="example.png" alt="example"></p><h1 id="教學"><a href="#教學" class="headerlink" title="教學"></a>教學</h1><h2 id="註冊-GearHost-帳號-選擇性"><a href="#註冊-GearHost-帳號-選擇性" class="headerlink" title="註冊 GearHost 帳號(選擇性)"></a>註冊 GearHost 帳號(選擇性)</h2><blockquote><p>如果有其他有 php 和 mysql 伺服器可以直接跳過這一步</p></blockquote><p>到 <a href="https://www.gearhost.com/" target="_blank" rel="noopener">GearHost</a> 註冊一個帳號</p><p>然後在管理頁面中左側找到 <code>CloudSites</code> 和 <code>Databases</code>，分別建立一個網站和資料庫</p><p>關於資料庫請務必選擇 <code>MYSQL</code>，不要選到其他的</p><h2 id="下載與設定"><a href="#下載與設定" class="headerlink" title="下載與設定"></a>下載與設定</h2><p>在 <a href="https://github.com/MoeNetwork/Tieba-Cloud-Sign/releases" target="_blank" rel="noopener">releases</a> 頁面上找到一個想要的版本下載(我用 V4.9)</p><p>下載後解壓縮到任何一個資料夾，然後打開裡面有個檔案 <code>config.php</code></p><p>在裡面找到下面的文字，按照注釋修改</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////////////////////////////以下选项只需在使用MySQL时填写////////////////////////////</span></span><br><span class="line"><span class="comment">//MySQL 数据库地址，普通主机一般为localhost</span></span><br><span class="line">define(<span class="string">'DB_HOST'</span>,<span class="string">'資料庫位置'</span>);</span><br><span class="line"><span class="comment">//MySQL 数据库用户名</span></span><br><span class="line">define(<span class="string">'DB_USER'</span>,<span class="string">'使用者名稱'</span>);</span><br><span class="line"><span class="comment">//MySQL 数据库密码</span></span><br><span class="line">define(<span class="string">'DB_PASSWD'</span>,<span class="string">'使用者密碼'</span>);</span><br><span class="line"><span class="comment">//MySQL 数据库名称</span></span><br><span class="line">define(<span class="string">'DB_NAME'</span>,<span class="string">'資料庫名稱'</span>);</span><br></pre></td></tr></table></figure><h2 id="上傳網站-GearHost"><a href="#上傳網站-GearHost" class="headerlink" title="上傳網站 (GearHost)"></a>上傳網站 (GearHost)</h2><blockquote><p>其他伺服器請用各自支援的方式上傳</p></blockquote><p>輸入下方的指令來建立一個 git repo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"init"</span></span><br></pre></td></tr></table></figure><p>然後到剛剛新增的網站頁面找到 <code>Deploy</code> 點進去</p><p>然後在下面找到 <code>LocalGit</code> 的來啟用後會看到下面的資訊</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Git URL: GITURL</span><br><span class="line">Username: USERNAME</span><br><span class="line">Password: PASSWORD</span><br></pre></td></tr></table></figure><p>使用上面的資訊依序輸入指令，如果有遇到到要輸入帳號密碼的就填進去就好</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add deploy GITURL</span><br><span class="line">git push -u deploy master</span><br></pre></td></tr></table></figure><p>然後完成之後在頁面上找到 <code>Launch CloudSite</code> 就能進入網頁的安裝介面了</p><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>安裝介面都是中文，只看字應該沒問題</p><p>不過在第三步驟會問你是否已經設定過資料庫了，那邊請選擇 <code>是</code> 就好</p><p>接下來完成後進入首頁，用在第三步驟設定的管理員帳號登入就 ok 了</p><h2 id="排程"><a href="#排程" class="headerlink" title="排程"></a>排程</h2><p>因為它沒辦法自己定時做一些工作(簽到、刷新列表等…)，所以需要使用 cron 來定時</p><p>不過對於它來說我覺得使用 <a href="https://cron-job.org/en/" target="_blank" rel="noopener">cron-job</a> 這個免費服務比較適合，也更簡單</p><p>到它的網站上註冊一個帳號，然後到 <a href="https://cron-job.org/en/members/jobs/add/" target="_blank" rel="noopener">Create cronjobs</a> 頁面中新增一個排程</p><p>title 隨便取，而網址要設定到網站下的 <code>/do.php</code> 才行</p><p>例如: <code>https://MY_TIEBA_CLOUD_SIGN_SERVER.net/do.php</code></p><p>而 Schedule 我是設成每 30 分執行一次，可以按照自己需求調整</p><blockquote><p>建議不要設定為一天只執行一次<br>因為預設設定每次簽到只會簽到 10 個吧(能自己調整設定)</p></blockquote><p>然後後面其他設定可以按照自己需求調整，最後按下 <code>Save</code> 儲存設定就完成了</p><h1 id="Gravatar"><a href="#Gravatar" class="headerlink" title="Gravatar"></a>Gravatar</h1><p>雖然它有支援 Gravatar，但是使用的是架在中國的 Gravatar mirror 伺服器(而且還掛掉了)</p><p>不過這是可以更改的，我是把它改成官方的</p><p>在 <code>lib/sfc.functions.php</code> 中找到函數 <code>gravatar</code> (約在 90 行左右)</p><p>把它改成下方這樣，然後重新上傳後應該就 ok 了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="title">gravatar</span><span class="params">($email, $s = <span class="number">140</span>, $d = <span class="string">'mm'</span>, $g = <span class="string">'g'</span>, $site = <span class="string">'moefont'</span>)</span></span>&#123;</span><br><span class="line">  $hash = md5($email);</span><br><span class="line"><span class="keyword">return</span><span class="string">"https://www.gravatar.com/avatar/$hash?s=$s&amp;r=$g"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p><a href="https://github.com/MoeNetwork/Tieba-Cloud-Sign/wiki/%E8%B4%B4%E5%90%A7%E4%BA%91%E7%AD%BE%E5%88%B0%E6%8F%92%E4%BB%B6%E5%BA%93" target="_blank" rel="noopener">官方插件列表</a></p><p>插件的其中一種安裝方法是直接在管理員介面中上傳 zip 檔就好</p><p>另一種是把 zip 解壓縮出來的資料夾放到 <code>plugins</code> 資料夾中</p><blockquote><p>需要讓插件的資料夾名稱和裡面的主要 php 主檔名相同<br>Ex: <code>plugins/pch18_relist/pch18_relist.php</code></p></blockquote><h1 id="使用我架的伺服器"><a href="#使用我架的伺服器" class="headerlink" title="使用我架的伺服器"></a>使用我架的伺服器</h1><p>如果想直接使用的話可以到 <a href="https://bdtcs.maple3142.net/" target="_blank" rel="noopener">BDTCS</a> 中使用註冊碼 <code>blog.maple3142.net</code> 註冊帳號</p><p>不過不保證會一直開啟註冊，也不保證穩定信</p><ul><li>2018/4/5 開放註冊，註冊碼 <code>blog.maple3142.net</code></li></ul>]]></content><categories><category> 教學 </category></categories><tags><tag> php </tag></tags></entry><entry><title>把 Apps Script 作為簡單的資料庫來使用</title><link href="/2018/04/01/apps-script-db/"/><url>/2018/04/01/apps-script-db/</url><content type="html"><![CDATA[<p><a href="https://script.google.com/" target="_blank" rel="noopener">Apps Script</a> 是 Google 所提供的免費服務之一<br>可以在上面執行 javascript 的子集與 Google 的去操作一些服務(ex: 雲端硬碟、試算表)<br>而他也支援使用 httphook ，可以在收到某些 request 時做出某些操作</p><p>而 <a href="https://github.com/maple3142/apps-script-db" target="_blank" rel="noopener">maple3142/apps-script-db</a> 就是使用它的一些功能來實現 key=&gt;value 的資料庫的小 library</p><a id="more"></a><h1 id="建立資料庫"><a href="#建立資料庫" class="headerlink" title="建立資料庫"></a>建立資料庫</h1><h2 id="建立第一個腳本"><a href="#建立第一個腳本" class="headerlink" title="建立第一個腳本"></a>建立第一個腳本</h2><p>到 <a href="https://script.google.com/home" target="_blank" rel="noopener">Apps Script 官網</a> 上登入你的 Google 帳號，按下右上角的新增指令碼</p><p><img src="newscript.png" alt="new script"></p><p>接下來把 <a href="https://raw.githubusercontent.com/maple3142/apps-script-db/master/db.js" target="_blank" rel="noopener">db.js</a> 裡面的內容複製到剛剛建立的新腳本中<br>然後點右上角的 <code>檔案</code>-&gt;<code>儲存</code>，或是直接按下 <code>Ctrl+S</code> 來儲存檔案，然後輸入任何能夠辨識的名稱</p><p><img src="pasteandsave.png" alt="paste and save"></p><blockquote><p>應該要看到這樣</p></blockquote><h2 id="發佈"><a href="#發佈" class="headerlink" title="發佈"></a>發佈</h2><p>接下來按上方選單的 <code>發佈</code>-&gt;<code>部屬為網路應用程式</code><br>然後在 <code>專案版本</code> 中輸入任何東西<br>以及把 <code>具有應用程式存取權的使用者</code> 改成 <code>任何人，甚至是匿名使用者</code></p><p><img src="deploy.png" alt="deploy"></p><p>然後按下確定之後會得到一個網址，這個網址就是你的資料庫位置</p><blockquote><p>網址應該長的像下面這樣</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://script.google.com/macros/s/隨機字串/exec</span><br></pre></td></tr></table></figure><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>目前這個專案也只有 javascript 的 api 能呼叫，不過實際上用任何能發送 http request 的語言都能操作資料庫<br>建議參考 <a href="https://github.com/maple3142/apps-script-db/blob/master/src/index.js" target="_blank" rel="noopener">index.js</a> 裡面的內容</p><blockquote><p>真的很簡單，不到 50 行</p></blockquote><h2 id="UI-編輯器"><a href="#UI-編輯器" class="headerlink" title="UI 編輯器"></a>UI 編輯器</h2><p>到 <a href="https://maple3142.github.io/apps-script-db/" target="_blank" rel="noopener">https://maple3142.github.io/apps-script-db/</a> 能看到一個頁面<br>在 <code>資料庫網址</code> 的欄位填上剛剛得到的資料庫網址，並按下 <code>載入</code><br>然後可以新增一些 key 值與更新一些 value</p><p><img src="editor.png" alt="editor"></p><p>而這個編輯器的原始碼在這個專案的 <a href="https://github.com/maple3142/apps-script-db/tree/webui" target="_blank" rel="noopener">webui</a> branch</p><h2 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save apps-script-db</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ADB = <span class="built_in">require</span>(<span class="string">'apps-script-db'</span>)</span><br><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">'node-fetch'</span>)</span><br><span class="line"><span class="keyword">const</span> db = <span class="keyword">new</span> ADB(YOUR_DATABASE_URL, fetch)</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line"><span class="keyword">await</span> db.set(<span class="string">'key'</span>, &#123;<span class="attr">a</span>: <span class="number">5</span>&#125;)</span><br><span class="line"><span class="keyword">await</span> db.get(<span class="string">'key'</span>) <span class="comment">//&#123;a: 5&#125;</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>因為這是使用 <code>fetch</code> 去發送請求的，所以需要自己提供 fetch 的 polyfill<br>不內建是因為為了減少瀏覽器打包的問題</p><h2 id="瀏覽器"><a href="#瀏覽器" class="headerlink" title="瀏覽器"></a>瀏覽器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span><span class="attr">src</span>=<span class="string">"https://unpkg.com/apps-script-db"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> db = <span class="keyword">new</span> ADB(YOUR_DATABASE_URL)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在瀏覽器端能直接從 cdn 上引用<br>不過也可以用 webpack 之類的東西來 require (一樣不需要手動提供 fetch)</p>]]></content><categories><category> 專案 </category></categories><tags><tag> javascript </tag><tag> appsscript </tag><tag> free </tag></tags></entry><entry><title>koel 私人音樂串流伺服器</title><link href="/2018/03/10/koel-music-streaming/"/><url>/2018/03/10/koel-music-streaming/</url><content type="html"><![CDATA[<p><a href="https://koel.phanan.net/" target="_blank" rel="noopener">koel</a> 是一個用 Laravel+Vue.js 做的開源音樂串流伺服器架設好之後是蠻方便的，在手機 ipad 之類的裝置上只要打開瀏覽器就能直接播放電腦上的音樂</p><p>這篇文章是一篇簡單的在 Windows 上建立 koel 伺服器的教學</p><p>官方教學: <a href="https://koel.phanan.net/docs/" target="_blank" rel="noopener">Koel docs</a><br>不過官方的教學稍微簡略了一些，對 Windows 使用者來說可能不是簡單的能依照上面搞定，因此才有這篇文章的出現</p><a id="more"></a><p>預覽圖:<br><img src="koel_example.png" alt="koel example"></p><h1 id="前置準備"><a href="#前置準備" class="headerlink" title="前置準備"></a>前置準備</h1><blockquote><p>所有的指令請在有管理員權限的 powershell 下執行</p></blockquote><h2 id="Chocolatey"><a href="#Chocolatey" class="headerlink" title="Chocolatey"></a>Chocolatey</h2><p>為了能輕鬆的安裝必要的軟體，需要先安裝 <a href="https://chocolatey.org/" target="_blank" rel="noopener">Chocolatey</a></p><p>官方的<a href="https://chocolatey.org/install#install-with-powershellexe" target="_blank" rel="noopener">安裝教學</a></p><p>執行下面這行指令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> Bypass -Scope <span class="keyword">Process</span> -Force; iex ((<span class="built_in">New-Object</span> System.Net.WebClient).DownloadString(<span class="string">'https://chocolatey.org/install.ps1'</span>))</span><br></pre></td></tr></table></figure><p>然後執行 <code>choco -v</code> 指令，如果沒有出現錯誤並顯示版本號就代表安裝成功了</p><h2 id="php-amp-composer"><a href="#php-amp-composer" class="headerlink" title="php &amp; composer"></a>php &amp; composer</h2><p>執行:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install php composer -y</span><br></pre></td></tr></table></figure><p>然後可能要稍微等一段時間下載與安裝完成後可以用 <code>php -v</code> 和 <code>composer -V</code> 來看有沒有安裝成功</p><p>接下來 koel 需要啟用一些 php 的 extension 才能正常使用</p><p>執行:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">php --ini</span><br><span class="line"><span class="comment"># 輸出:</span></span><br><span class="line"><span class="comment"># Configuration File (php.ini) Path: C:\WINDOWS</span></span><br><span class="line"><span class="comment"># Loaded Configuration File:         C:\tools\php72\php.ini</span></span><br><span class="line"><span class="comment"># Scan for additional .ini files in: (none)</span></span><br><span class="line"><span class="comment"># Additional .ini files parsed:      (none)</span></span><br></pre></td></tr></table></figure><p>然後用文字編輯器打開 <code>Loaded Configuration File:</code> 後面顯示的檔案</p><p>在檔案中找到 <code>;extension=exif</code>,<code>;extension=pdo_sqlite</code>,<code>;extension=fileinfo</code><br>分別改成 <code>extension=exif</code>,<code>extension=pdo_sqlite</code>,<code>extension=fileinfo</code> 然後儲存檔案</p><h2 id="node-js-amp-yarn-amp-git"><a href="#node-js-amp-yarn-amp-git" class="headerlink" title="node.js &amp; yarn &amp; git"></a>node.js &amp; yarn &amp; git</h2><p>執行:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install nodejs yarn git -y</span><br></pre></td></tr></table></figure><p>一樣能透過 <code>node -v</code> 和 <code>yarn -v</code> 檢查是否安裝成功<br>這個就沒有什麼東西需要額外設定的了</p><h1 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h1><h2 id="下載"><a href="#下載" class="headerlink" title="下載"></a>下載</h2><p>這邊假設想把 koel 安裝到 <code>D:\koel</code> 的位置<br>執行:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd D: <span class="comment"># 切換到 D 槽</span></span><br><span class="line">git clone https://github.com/phanan/koel.git koel <span class="comment"># 後面的 koel 是資料夾名稱</span></span><br><span class="line">cd koel <span class="comment"># 進入資料夾</span></span><br><span class="line">git checkout v3.<span class="number">7.2</span><span class="comment"># 在 https://github.com/phanan/koel/releases 檢查最新版的版本號</span></span><br><span class="line">composer install <span class="comment"># 安裝一些必要的 package</span></span><br><span class="line"><span class="built_in">New-Item</span> database/e2e.sqlite -type file <span class="comment"># 建立資料庫檔案 database/e2e.sqlite，之後會用到</span></span><br></pre></td></tr></table></figure><blockquote><p>要把上面的指令執行完成可能也要不少時間，尤其是 <code>composer install</code> 最慢(大概 5 分鐘)</p></blockquote><h2 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h2><p>再來是要執行 <code>php artisan koel:init</code> ，這個指令會互動式的問好幾個問題<br>例如音樂的資料夾位置，管理員的名稱、信箱、密碼</p><p>不過其中有一項是 <code>Database</code> (資料庫)，這一項請輸入 <code>sqlite</code><br>然後後面問你的 sqlite 位置請填 <code>D:\koel\database\e2e.sqlite</code> (絕對路徑，前面要根據你的資料夾位置更改)</p><blockquote><p>如果前面詢問音樂資料夾時已經有填入位置的話，建議先執行 <code>php artisan koel:sync</code> 來初次更新資料庫</p></blockquote><p>到這邊安裝已經完成了，輸入 <code>php artisan serve</code> 然後打開 <a href="http://localhost:8000" target="_blank" rel="noopener">http://localhost:8000</a> 應該就能看到登入介面</p><p>輸入前面所設定的 email 和密碼之後就能進到介面並在瀏覽器中享受音樂</p><blockquote><p>如需在網頁介面設定音樂資料夾位置的話<br>進入左側 <code>Settings</code><br>然後在 <code>Media Path</code> 欄位填音樂資料夾的絕對路徑</p></blockquote><h2 id="更改-port"><a href="#更改-port" class="headerlink" title="更改 port"></a>更改 port</h2><p>如果不想要使用 port 8000 的話可以把指令改成<br><code>php artisan serve --port=1234</code> 這樣就會讓 port 開在 1234</p><h1 id="允許同-wifi-使用-koel"><a href="#允許同-wifi-使用-koel" class="headerlink" title="允許同 wifi 使用 koel"></a>允許同 wifi 使用 koel</h1><p>執行指令 <code>ipconfig</code> 應該能看到自己在 wifi 下的 ip，例如我是 <code>192.168.0.20</code><br>如果在手機或其他在同個 wifi 下的裝置用瀏覽器瀏覽 <code>192.168.0.20:8000</code> 時已經可以的話建議可以跳過這一段</p><p>在 koel 的資料夾下用文字編輯器打開 <code>.env</code>，並找到一行 <code>APP_URL=xxx</code><br>把 <code>xxx</code> 改成 <code>http://192.168.0.20</code> 這樣的網址 <strong>請自己替換成正確的 ip</strong></p><p>然後未來的啟動伺服器指令要改成 <code>php artisan serve --host=192.168.0.20</code> 才能使用 <code>192.168.0.20</code> 來連接</p><h1 id="背景自動啟動"><a href="#背景自動啟動" class="headerlink" title="背景自動啟動"></a>背景自動啟動</h1><h2 id="背景啟動"><a href="#背景啟動" class="headerlink" title="背景啟動"></a>背景啟動</h2><p>自動啟動如果直接使用 batch 來做會導致視窗不會關掉的問題，所以會使用到 vbscript</p><p>在 koel 的資料夾底下建立一個檔案叫 <code>init.vbs</code><br>內容打上:</p><figure class="highlight vbs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CreateObject</span>(<span class="string">"WScript.Shell"</span>).Run <span class="string">"php artisan serve --host=192.168.0.20"</span>,<span class="number">0</span>,<span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><p>中間的字串要改成自己要的啟動指令</p></blockquote><p>這樣只要在 <code>init.vbs</code> 上點兩下就會自動啟動伺服器並讓視窗消失</p><h2 id="開機自動執行"><a href="#開機自動執行" class="headerlink" title="開機自動執行"></a>開機自動執行</h2><p>按下 <code>win+R</code>，在<strong>執行</strong>的視窗中輸入 <code>shell:startup</code> 並按確定就會打開一個資料夾<br>這個資料夾裡的檔案在開機時都會被自動執行，所以要在這邊建立 <code>initkoel.bat</code><br>內容則打上:</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d D:\koel</span><br><span class="line"><span class="built_in">start</span> /b init.vbs</span><br></pre></td></tr></table></figure><blockquote><p>要把 cd 的路徑改成你的 koel 資料夾<br>如果不是放在 <code>C:</code>，就不能把 <code>\d</code> 拿掉</p></blockquote><h1 id="Youtube-amp-Last-fm"><a href="#Youtube-amp-Last-fm" class="headerlink" title="Youtube &amp; Last.fm"></a>Youtube &amp; Last.fm</h1><p>官方的教學: <a href="https://koel.phanan.net/docs/#/3rd-party" target="_blank" rel="noopener">https://koel.phanan.net/docs/#/3rd-party</a></p><p>待補…</p>]]></content><categories><category> 教學 </category></categories><tags><tag> php </tag><tag> music </tag></tags></entry><entry><title>透過修改 apk 來移除巴哈姆特 app 廣告</title><link href="/2018/02/05/remove-bahamut-app-ads-by-modify-apk/"/><url>/2018/02/05/remove-bahamut-app-ads-by-modify-apk/</url><content type="html"><![CDATA[<p>之前已經有一篇<a href="/2017/11/26/block-android-bahamut-ads/" title="阻擋 Android 版巴哈姆特的廣告">阻擋 Android 版巴哈姆特的廣告</a>在講如何阻擋巴哈 app 廣告了<br>但自從 Android 7 開始，Android 對於使用者自己新增的憑證有限制會導致 https 過濾不完全，有 root 的裝置可以使用 <a href="https://github.com/Nutomic/movecerts/releases" target="_blank" rel="noopener">Move Certs!</a> 這個 app 來把 AdGuard 的憑證轉為系統憑證，這樣 AdGuard 才能繼續正常過濾<br>因此對於沒 root 的裝置就需要其他辦法來去除廣告了，這就是這篇文章的目的</p><p>資訊來源: <a href="https://github.com/AdguardTeam/AdguardForAndroid/issues/334" target="_blank" rel="noopener">ArguardForAndroid issue #334</a></p><blockquote><p>Move Certs! 的 GitHub releases 中只有 <code>1.0.1</code> 的 apk，最新版 <code>1.0.2</code> 可能要另外找，而它的 Package name 是 <code>com.nutomic.zertman</code></p></blockquote><blockquote><p>更新: 有使用 Magisk 的人可以去搜尋一個 Move Certificates 的 module 來安裝，功能和 Move Certs! 一樣</p></blockquote><a id="more"></a><h1 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h1><ol><li>安裝 java</li><li>安裝 <a href="https://ibotpeaches.github.io/Apktool/install/" target="_blank" rel="noopener">apktool</a> (內有安裝教學)</li><li>取得原版巴哈姆特 apk (<a href="https://apkpure.com/tw/%E5%B7%B4%E5%93%88%E5%A7%86%E7%89%B9/tw.com.gamer.android.activecenter" target="_blank" rel="noopener">apkpure</a>)</li></ol><p>這篇文章使用版本為</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java=1.8.0_162</span><br><span class="line">apktool=2.3.1</span><br><span class="line">巴哈姆特apk=5.7.0</span><br></pre></td></tr></table></figure><h1 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h1><p>在有<code>bahamut.apk</code>的目錄下輸入指令<code>apktool d bahamut.apk</code><br>然後打開<code>./bahamut/smali/tw/com/gamer/android/ad/MobileAdView.smali</code><br>在裡面找到一行</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">.field</span><span class="keyword"> private</span><span class="keyword"> static</span><span class="keyword"> final</span> API:<span class="class">Ljava/lang/String;</span> = <span class="string">"https://api.gamer.com.tw/mobile_app/ad/v2/mobile_ad.php"</span></span><br></pre></td></tr></table></figure><p>在這邊可以用瀏覽器打開 <a href="https://api.gamer.com.tw/mobile_app/ad/v2/mobile_ad.php" target="_blank" rel="noopener">https://api.gamer.com.tw/mobile_app/ad/v2/mobile_ad.php</a>，會發現是 json 格式的廣告列表修改方式是利用線上服務(gist,pastebin 之類的)來回傳空的廣告列表:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"banner"</span>:&#123;&#125;,<span class="string">"native_major"</span>:&#123;<span class="string">"Android__"</span>:[],<span class="string">"iOS__"</span>:[]&#125;,<span class="string">"native_minor"</span>:&#123;<span class="string">"Android__"</span>:[],<span class="string">"iOS__"</span>:[]&#125;&#125;</span><br></pre></td></tr></table></figure><p>我已經用上面的內容新增一個 gist 了，懶得新增可以直接複製: <a href="https://cdn.rawgit.com/maple3142/d2e5ad1aee53879dadb3fabae257e5e8/raw/fb063a01d90b7e7fb2c22aa9f8890d809f73b778/ad.json" target="_blank" rel="noopener">url</a><br>然後把剛剛上面那行改成:</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">.field</span><span class="keyword"> private</span><span class="keyword"> static</span><span class="keyword"> final</span> API:<span class="class">Ljava/lang/String;</span> = <span class="string">"空廣告列表的網址"</span></span><br></pre></td></tr></table></figure><p>再來是第二處要修改一樣是在<code>MobileAdView.smali</code>大約 600 多行的地方找到</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> static</span> requestAd(/*這邊省略...*/)V</span><br><span class="line">/*其他程式碼*/</span><br><span class="line">/*在這邊應該能找到下方那一行，這個網址也要改*/</span><br><span class="line"></span><br><span class="line">const-string v3, <span class="string">"https://api.gamer.com.tw/mobile_app/ad/v2/mobile_ad.php"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">.end method</span></span><br></pre></td></tr></table></figure><p>這邊的改法也是把 api 網址改成空廣告列表的網址</p><p>然後再度回到有<code>bahamut.apk</code>的資料夾下執行指令<code>apktool b bahamut -o bahamut_noads.apk</code><br>之後就會產生出沒有廣告的巴哈姆特 apk: <code>bahamut_noads.apk</code><br>不過這個 apk 因為還沒有簽名所以無法直接安裝(有核心破解就可以跳過簽名的部分)</p><h1 id="簽名"><a href="#簽名" class="headerlink" title="簽名"></a>簽名</h1><p><em>已經會幫 apk 簽名的請直接跳過這一部份</em><br>為了簡化簽名的方法，這邊會使用第三方工具 <a href="https://github.com/patrickfav/uber-apk-signer" target="_blank" rel="noopener">uber-apk-signer</a><br>到 <a href="https://github.com/patrickfav/uber-apk-signer/releases" target="_blank" rel="noopener">Releases</a> 頁面選擇最新版的，在下面找到<code>uber-apk-signer-x.y.z.jar</code>下載(x.y.z 是版本號)</p><p>然後把下載回來的<code>uber-apk-signer-x.y.z.jar</code>放到與<code>bahamut_noads.apk</code>同個目錄下並改名<code>sign.jar</code><br>然後執行指令<code>java -jar sign.jar --apks ./bahamut_noads.apk</code><br>最後會得到<code>bahamut_noads-aligned-debugSigned.apk</code>，就可以傳到手機上去安裝<br><strong>安裝前請務必把原版巴哈姆特 app 移除</strong></p><h1 id="關於去廣告"><a href="#關於去廣告" class="headerlink" title="關於去廣告"></a>關於去廣告</h1><p>如果可以的話我是希望巴哈能像動畫瘋一樣推出付費去廣告的方法，但是目前(2018/2/5 17:57)還沒有這種方法來去廣告當然如果想要靠看廣告支持巴哈姆特的營運的話可以繼續使用官方 app<br>而如果和我一樣看到廣告就不舒服的話請自己按照這篇文章的方法去去廣告，我沒有打算開放下載修改後的 apk</p><h1 id="更新紀錄"><a href="#更新紀錄" class="headerlink" title="更新紀錄"></a>更新紀錄</h1><ul><li>2018/4/11 更新: 巴哈姆特 5.7.5 版有很大的改動，目前最新能修改的版本為 5.7.3</li><li>2018/8/20 更新: 修改 Move Certs! 的連結，因為它已經從 Google Play 消失了</li></ul>]]></content><categories><category> 研究 </category></categories><tags><tag> Bahamut </tag><tag> ads </tag><tag> android </tag><tag> apk </tag></tags></entry><entry><title>Video Game Music 批量下載器</title><link href="/2018/01/20/video-game-music-batch-downloader/"/><url>/2018/01/20/video-game-music-batch-downloader/</url><content type="html"><![CDATA[<p><a href="https://downloads.khinsider.com/" target="_blank" rel="noopener">Video Game Music</a> 是一個提供許多遊戲 OST 下載與試聽的網站，也提供許多免費單曲下載<br>不過下載整張專輯的功能是需要 donate 的，因此就弄了一個簡單的腳本來批量下載<br>下載連結: <a href="https://greasyfork.org/zh-TW/scripts/37314-video-game-music-batch-downloader" target="_blank" rel="noopener">Greasy Fork</a></p><blockquote><p>我之所以知道這個網站是為了下載整張<a href="http://store.steampowered.com/app/351640/Eternal_Senia/" target="_blank" rel="noopener">永恆的賽妮亞</a>的 OST</p><p>這遊戲也是不錯的遊戲，有興趣可以玩玩看</p></blockquote><a id="more"></a><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>安裝完上面的腳本之後到 <a href="https://downloads.khinsider.com/" target="_blank" rel="noopener">Video Game Music</a> 網站上找到你喜歡的遊戲這篇文章以<a href="https://downloads.khinsider.com/game-soundtracks/album/eternal-senia" target="_blank" rel="noopener">永恆的賽妮亞</a>作為範例<br><img src="eternal_senia_ostpage.png" alt="Eternal Senia OST page"></p><p>按下圖片中的 <strong>click to download</strong> 然後右邊會出現一個進度條建議瀏覽器留在這個分頁，因為同時瀏覽其他分頁時可能會卡卡的(Firefox)<br><img src="downloading.png" alt="Album Downloading"></p><p>等進度條跑到滿之後瀏覽器應該會自動觸發下載，檔案名=[遊戲名稱].zip<br>把 zip 用 7zip,winrar 之類的程式打開裡面就會有你想要的音樂了<br><img src="zip.png" alt="zip"></p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>直接點擊下方的任何一首音樂就會進入到音樂的下載頁面，而下載頁面上有連結然後用<code>ajax</code>的方式去把檔案存在記憶體成<code>Blob</code>的格式最後用 <a href="https://stuk.github.io/jszip/" target="_blank" rel="noopener">JSZip</a> 把檔案包裝成 zip 檔</p><p>程式碼: <a href="https://greasyfork.org/zh-TW/scripts/37314-video-game-music-batch-downloader/code" target="_blank" rel="noopener">Greasy Fork</a></p><h2 id="downloadblob"><a href="#downloadblob" class="headerlink" title="downloadblob"></a>downloadblob</h2><p>因為網站本身在<code>https://downloads.khinsider.com/</code>上，屬於 https<br>而存放音樂的伺服器在<code>http://66.90.93.122/</code>上，屬於 http<br>因為 protocol 不同的關係不符合同源政策所以沒辦法直接用一般的<code>XMLHttpRequest</code>和<code>fetch</code><br>需要使用腳本管理器提供的<code>GM_xmlhttpRequest</code>來做請求</p><p>函數也很簡單，就是給 url 然後回傳一個<code>Promise&lt;Blob&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @grant        GM_xmlhttpRequest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//something...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">downloadblob</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span><span class="keyword">new</span><span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    GM_xmlhttpRequest(&#123;</span><br><span class="line">      method: <span class="string">'GET'</span>,</span><br><span class="line">      url,</span><br><span class="line">      responseType: <span class="string">'blob'</span>,</span><br><span class="line">      onload: <span class="function"><span class="params">res</span> =&gt;</span> resolve(res.response)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主程式"><a href="#主程式" class="headerlink" title="主程式"></a>主程式</h2><p>在原本就有的 <code>click to download</code> 連結上綁<code>click</code>事件並取消它，然後顯示進度條接下來取得遊戲名稱和各首歌下載頁面的網址用<code>fetch</code>去抓下載頁面，並且用<code>jquery</code>在上面找出<code>mp3</code>的真實連結再來把把真實連結轉成<code>{blob: Promise&lt;Blob&gt;,name: String}</code>的物件，用<code>reduce</code>去加入<code>JSZip</code> (<code>JSZip</code>支援<code>Promise</code>)<br>而<code>JSZip</code>有支援進度，在有進度時就更新前面的<code>&lt;progress&gt;</code><br>最後在下載完成時把整個<code>zip</code>的<code>Blob</code>弄成 url 並觸發下載就完成了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'a:contains("click to download")'</span>).on(<span class="string">'click'</span>, e =&gt; &#123;</span><br><span class="line">  e.preventDefault()</span><br><span class="line">  $(<span class="string">'.albumMassDownload'</span>).append(<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;span&gt;Download progress:&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;progress min="0" max="100" id="dp" value="0"&gt;&lt;/progress&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = $(<span class="string">'h2'</span>)[<span class="number">0</span>].textContent</span><br><span class="line"><span class="keyword">const</span> urls = $(<span class="string">'tr&gt;td.clickable-row:not([align])'</span>)</span><br><span class="line">    .toArray()</span><br><span class="line">    .map(<span class="function"><span class="params">el</span> =&gt;</span></span><br><span class="line">      $(el)</span><br><span class="line">        .find(<span class="string">'a'</span>)</span><br><span class="line">        .attr(<span class="string">'href'</span>)</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">const</span> requests = urls.map(<span class="function"><span class="params">e</span> =&gt;</span> fetch(e).then(<span class="function"><span class="params">r</span> =&gt;</span> r.text()))</span><br><span class="line"><span class="built_in">Promise</span>.all(requests).then(<span class="function"><span class="params">ar</span> =&gt;</span></span><br><span class="line">    ar</span><br><span class="line">      .map(<span class="function"><span class="params">ht</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> url = $(ht)</span><br><span class="line">          .find(<span class="string">'a:contains("Click here to download as MP3")'</span>)</span><br><span class="line">          .attr(<span class="string">'href'</span>)</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">          blob: downloadblob(url),</span><br><span class="line">          name: <span class="built_in">decodeURIComponent</span>(url.split(<span class="string">'/'</span>).pop())</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .reduce(<span class="function">(<span class="params">zip, file</span>) =&gt;</span> &#123;</span><br><span class="line">        zip.file(file.name, file.blob)</span><br><span class="line"><span class="keyword">return</span> zip</span><br><span class="line">      &#125;, <span class="keyword">new</span> JSZip())</span><br><span class="line">      .generateAsync(&#123; <span class="attr">type</span>: <span class="string">'blob'</span> &#125;, meta =&gt; &#123;</span><br><span class="line">        $(<span class="string">'#dp'</span>).attr(<span class="string">'value'</span>, <span class="built_in">parseInt</span>(meta.percent))</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function"><span class="params">blob</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> url = URL.createObjectURL(blob)</span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">        a.download = title + <span class="string">'.zip'</span></span><br><span class="line">        a.href = url</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(a)</span><br><span class="line">        a.click()</span><br><span class="line">        a.remove()</span><br><span class="line">        URL.revokeObjectURL(url)</span><br><span class="line">      &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content><categories><category> userscript </category></categories><tags><tag> javascript </tag><tag> userscript </tag></tags></entry><entry><title>巴哈姆特 imgur 上傳器</title><link href="/2017/12/30/baha-imgur-upload/"/><url>/2017/12/30/baha-imgur-upload/</url><content type="html"><![CDATA[<p>這是一個簡單的巴哈姆特 userscript<br>可以在<strong>上傳圖片</strong>的對話框中增加上傳到 imgur 的功能</p><p><a href="https://forum.gamer.com.tw/C.php?bsn=60076&snA=4338034" target="_blank" rel="noopener">發在場外的文章</a></p><a id="more"></a><p>腳本網址: <a href="https://greasyfork.org/zh-TW/scripts/36735-baha-imgur-upload" target="_blank" rel="noopener">https://greasyfork.org/zh-TW/scripts/36735-baha-imgur-upload</a></p><h1 id="使用教學"><a href="#使用教學" class="headerlink" title="使用教學"></a>使用教學</h1><p>其實就下面兩張 gif 圖片而已不過在第一次使用下面任何一個功能時會彈出一個視窗要求登入 imgur 的帳號並驗證</p><h2 id="從電腦選取圖片上傳"><a href="#從電腦選取圖片上傳" class="headerlink" title="從電腦選取圖片上傳"></a>從電腦選取圖片上傳</h2><p><img src="usage.gif" alt="basic usage"></p><h2 id="把外部網址轉換成-imgur-網址"><a href="#把外部網址轉換成-imgur-網址" class="headerlink" title="把外部網址轉換成 imgur 網址"></a>把外部網址轉換成 imgur 網址</h2><p><img src="usage2.gif" alt="basic usage2"></p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>基本上這個腳本的實作原理就是使用者登入後取得<code>access_token</code>並將它保存下來然後上傳時用這個<code>access_token</code>去向 api 伺服器上傳圖片完整的 code 可以到 <a href="https://greasyfork.org/zh-TW/scripts/36735-baha-imgur-upload/code" target="_blank" rel="noopener">greasyfork</a> 上看</p><blockquote><p>下面的 code 是 0.5 版的</p></blockquote><h2 id="取得-access-token"><a href="#取得-access-token" class="headerlink" title="取得 access_token"></a>取得 access_token</h2><p>因為 imgur 在註冊 Application 時要提供一個 callback 網址所以我是直接把它放在 <a href="/bahamut-imgur-upload.html">bahamut-imgur-upload.html</a> 頁面上然後用 javascript 把<code>access_token</code>從網址中取出</p><p>網址格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.maple3142.net/bahamut-imgur-upload.html#access_token=$&#123;access_token&#125;&amp;expires_in=aaa&amp;token_type=bbb&amp;refresh_token=ccc&amp;account_username=ddd&amp;account_id=eee</span><br></pre></td></tr></table></figure><p>這裡面重要的只有<code>access_token</code>欄位，不過特別的是 query string 不知道為什麼會被放在 hashbang 之後所以就用 regex 把<code>access_token</code>給取出來，然後存在腳本的儲存空間中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @match        https://blog.maple3142.net/bahamut-imgur-upload.html</span></span><br><span class="line"><span class="comment">// blah blah blah....</span></span><br><span class="line"><span class="keyword">if</span> (location.hostname === <span class="string">'blog.maple3142.net'</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> access_token = <span class="regexp">/access_token=(.*?)&amp;/</span>.exec(location.hash)[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> (access_token) &#123;</span><br><span class="line">    GM_setValue(<span class="string">'access_token'</span>, access_token)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="helpers"><a href="#helpers" class="headerlink" title="helpers"></a>helpers</h2><h3 id="上傳"><a href="#上傳" class="headerlink" title="上傳"></a>上傳</h3><p>上傳的部分直接寫成一個函數來用，回傳一個<code>Promise</code><br>data 部分只放一個 image 是因為 imgur 能自己判斷 image 是 base64 還是網址而 catch 的部分先寫好是因為外面的錯誤處理都是 alert 然後把上傳視窗關閉</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="title">upload</span>(<span class="params">image</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> $.ajax(&#123;</span><br><span class="line">    type: <span class="string">'POST'</span>,</span><br><span class="line">    url: <span class="string">'https://api.imgur.com/3/image'</span>,</span><br><span class="line">    data: &#123; image &#125;,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      Authorization: <span class="string">`Bearer <span class="subst">$&#123;GM_getValue(<span class="string">'access_token'</span>)&#125;</span>`</span></span><br><span class="line">    &#125;,</span><br><span class="line">    dataType: <span class="string">'json'</span></span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.error(e)</span><br><span class="line">    alert(<span class="string">'上傳失敗'</span>)</span><br><span class="line">    egg.lightbox.close()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>這邊是另外 3 個簡單的輔助函數</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="title">chk_isAuthorized</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//檢查有沒有access_token</span></span><br><span class="line"><span class="keyword">return</span> GM_getValue(<span class="string">'access_token'</span>, <span class="literal">null</span>) !== <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">login</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//觸發登入視窗</span></span><br><span class="line"><span class="built_in">window</span>.open(</span><br><span class="line"><span class="string">'https://api.imgur.com/oauth2/authorize?client_id=41e93183c27ec0e&amp;response_type=token'</span>,</span><br><span class="line"><span class="string">'oauth'</span>,</span><br><span class="line"><span class="string">'height=700,width=700'</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">readbase64</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line"><span class="comment">//讀取檔案成為base64</span></span><br><span class="line"><span class="keyword">return</span><span class="keyword">new</span><span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader()</span><br><span class="line">    reader.onload = <span class="function"><span class="params">e</span> =&gt;</span> res(e.target.result)</span><br><span class="line">    reader.onerror = <span class="function"><span class="params">err</span> =&gt;</span> rej(err)</span><br><span class="line">    reader.readAsDataURL(file)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UI-和主要邏輯"><a href="#UI-和主要邏輯" class="headerlink" title="UI 和主要邏輯"></a>UI 和主要邏輯</h2><p>UI 部分稍微麻煩了一些，因為上傳框並不是本來就存在的，是用 js 生成出來的所以只好用<code>MutationObserver</code>來監聽 DOM 的變化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> MutationObserver(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> $origUpl = $(<span class="string">'#bhImgModeUpload'</span>) <span class="comment">//上傳圖片框</span></span><br><span class="line"><span class="keyword">if</span> ($origUpl.css(<span class="string">'display'</span>) === <span class="string">'block'</span>) &#123;</span><br><span class="line"><span class="comment">//如果上傳圖片框存在</span></span><br><span class="line"><span class="comment">//先跳過，這裡會新增一個 div#bahaimgur 元素</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $(<span class="string">'#bahaimgur'</span>).remove() <span class="comment">//當不存在的時候就把 div#bahaimgur 移除掉</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> $origUrlinput = $(<span class="string">'#bhImgModeInsertUrl'</span>) <span class="comment">//插入圖片網址的輸入框，這部分和上面很像</span></span><br><span class="line"><span class="keyword">if</span> ($origUrlinput.css(<span class="string">'display'</span>) === <span class="string">'block'</span>) &#123;</span><br><span class="line"><span class="comment">//先跳過，這裡會新增一個 div#bahaimgur_cvt 元素</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $(<span class="string">'#bahaimgur_cvt'</span>).remove()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">observer.observe(<span class="built_in">document</span>.body, &#123; <span class="attr">attributes</span>: <span class="literal">true</span>, <span class="attr">childList</span>: <span class="literal">true</span>, <span class="attr">characterData</span>: <span class="literal">true</span>, <span class="attr">subtree</span>: <span class="literal">true</span> &#125;) <span class="comment">//在 &lt;body&gt; 上監聽</span></span><br></pre></td></tr></table></figure><h3 id="bahaimgur"><a href="#bahaimgur" class="headerlink" title="#bahaimgur"></a>#bahaimgur</h3><p>這是上面 observer 裡面第一個 if 的內容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($(<span class="string">'#imgurupl'</span>).length) <span class="keyword">return</span><span class="comment">//如果已經有了就不要再新增了，否則會無限迴圈</span></span><br><span class="line">$origUpl.after(<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div id="bahaimgur"&gt;</span></span><br><span class="line"><span class="string">  &lt;input type="file" accept="image/*" id="imgurupl"&gt;</span></span><br><span class="line"><span class="string">  &lt;button id="imguruplbtn"&gt;上傳imgur&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>) <span class="comment">//插入元素</span></span><br><span class="line">$(<span class="string">'#imguruplbtn'</span>).on(<span class="string">'click'</span>, e =&gt; &#123;</span><br><span class="line">  e.preventDefault()</span><br><span class="line">  e.stopPropagation()</span><br><span class="line"><span class="keyword">if</span> (!chk_isAuthorized()) &#123;</span><br><span class="line"><span class="comment">//如果還沒有登入就要求登入</span></span><br><span class="line">    login()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">const</span> file = $(<span class="string">'#imgurupl'</span>)[<span class="number">0</span>].files[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> (!file) <span class="keyword">return</span><span class="comment">//no file</span></span><br><span class="line"></span><br><span class="line">  readbase64(file)</span><br><span class="line">    .then(<span class="function"><span class="params">image</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//讀取檔案成 base64格式</span></span><br><span class="line">      $(<span class="string">'#bahaimgur'</span>).hide(),</span><br><span class="line">        $(<span class="string">'#bhImgMsg'</span>)</span><br><span class="line">          .html(<span class="string">'圖片上傳中, 請稍候...'</span>)</span><br><span class="line">          .show(),</span><br><span class="line">        $(<span class="string">'#bhImgModeUpload'</span>).hide()</span><br><span class="line"><span class="keyword">return</span> upload(image.split(<span class="string">'base64,'</span>)[<span class="number">1</span>]) <span class="comment">//這邊要做split是因為readbase64給的字串是dataurl的形式，可是imgur api要的是純base64字串</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!r.success) &#123;</span><br><span class="line">        alert(<span class="string">'上傳失敗'</span>)</span><br><span class="line">        egg.lightbox.close()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//r.data.link 是照片的網址</span></span><br><span class="line"><span class="keyword">if</span> (unsafeWindow.bahaRte != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">//如果有所見即所得編輯器</span></span><br><span class="line">        bahaRte.toolbar.insertUploadedImage(r.data.link)</span><br><span class="line">      &#125; <span class="keyword">else</span><span class="keyword">if</span> ($(<span class="string">'#balaTextId'</span>).length) &#123;</span><br><span class="line"><span class="comment">//如果是公會/叭啦叭啦頁面的回覆框旁邊的上傳圖片</span></span><br><span class="line"><span class="keyword">const</span> id = $(<span class="string">'#balaTextId'</span>).html() <span class="comment">//取得輸入框的id</span></span><br><span class="line"><span class="keyword">const</span> $tx = $(<span class="string">'#'</span> + id) <span class="comment">//輸入框</span></span><br><span class="line">        $tx.val($tx.val() + r.data.link) <span class="comment">//append</span></span><br><span class="line">        egg.lightbox.close()</span><br><span class="line">      &#125; <span class="keyword">else</span><span class="keyword">if</span> ($(<span class="string">'#msgtalk'</span>).length) &#123;</span><br><span class="line"><span class="comment">//如果是公會/叭啦叭啦頁面的新增欄位 (這一定要放在上面的if後面)</span></span><br><span class="line">        egg.lightbox.close()</span><br><span class="line"><span class="keyword">const</span> $msgtalk = $(<span class="string">'#msgtalk'</span>)</span><br><span class="line">        $msgtalk.val($msgtalk.val() + r.data.link) <span class="comment">//append</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//其他種類 ex:新版哈拉區文章底部的簡易編輯器</span></span><br><span class="line">        prompt(<span class="string">'暫時還不支援這種編輯器，不過可以複製下方的網址來貼上'</span>, r.data.link)</span><br><span class="line">        $(<span class="string">'#bhImgMsg'</span>).hide()</span><br><span class="line">        $(<span class="string">'#bhImgModeUpload'</span>).show()</span><br><span class="line">        $(<span class="string">'#bahaimgur'</span>).show()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="bahaimgur-cvt"><a href="#bahaimgur-cvt" class="headerlink" title="#bahaimgur_cvt"></a>#bahaimgur_cvt</h3><p>這和上面的也有點類似，不過更簡單一些</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($(<span class="string">'#bahaimgur_cvt'</span>).length) <span class="keyword">return</span></span><br><span class="line">$(<span class="string">'#bhImgImageUrl'</span>).after(<span class="string">`&lt;button id="bahaimgur_cvt"&gt;轉換成imgur網址&lt;/button&gt;`</span>)</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#bahaimgur_cvt'</span>).on(<span class="string">'click'</span>, e =&gt; &#123;</span><br><span class="line">  e.preventDefault()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!chk_isAuthorized()) &#123;</span><br><span class="line">    login()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">const</span> url = $(<span class="string">'#bhImgImageUrl'</span>).val() <span class="comment">//取得輸入框內容</span></span><br><span class="line"><span class="keyword">if</span> (!url) &#123;</span><br><span class="line">    alert(<span class="string">'請輸入網址'</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  $(<span class="string">'#bhImgMsg'</span>)</span><br><span class="line">    .html(<span class="string">'圖片上傳中, 請稍候...'</span>)</span><br><span class="line">    .show()</span><br><span class="line">  upload(url).then(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//直接把原本的 url 作為 image 傳給 imgur api</span></span><br><span class="line"><span class="keyword">if</span> (!r.success) &#123;</span><br><span class="line">      alert(<span class="string">'上傳失敗'</span>)</span><br><span class="line">      egg.lightbox.close()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    $(<span class="string">'#bhImgImageUrl'</span>).val(r.data.link) <span class="comment">//把原本的輸入框網址換成 imgur 回傳的 url</span></span><br><span class="line">    $(<span class="string">'#bhImgMsg'</span>).hide()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content><categories><category> userscript </category></categories><tags><tag> javascript </tag><tag> userscript </tag><tag> Bahamut </tag></tags></entry><entry><title>httpsrv - 簡單的本機 http 伺服器</title><link href="/2017/12/16/httpsrv/"/><url>/2017/12/16/httpsrv/</url><content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/httpsrv" target="_blank" rel="noopener">httpsrv</a> 是一個非常簡單的小型伺服器，功用很像<code>python2</code>的<code>SimpleHTTPServer</code><br>可以透過輸入簡單的一行指令，將某個資料夾作為暫時的 http server，然後就能在瀏覽器上瀏覽</p><a id="more"></a><h1 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -g httpsrv</span><br><span class="line"><span class="comment">#或 yarn global add httpsrv</span></span><br></pre></td></tr></table></figure><h1 id="使用教學"><a href="#使用教學" class="headerlink" title="使用教學"></a>使用教學</h1><h2 id="basic"><a href="#basic" class="headerlink" title="basic"></a>basic</h2><p>先使用<code>cd</code>到你想要的資料夾之後輸入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpsrv . <span class="comment"># . 代表當前資料夾</span></span><br></pre></td></tr></table></figure><p>然後打開瀏覽器到 <a href="localhost:3333" target="_blank" rel="noopener">localhost:3333</a> 應該能看到目前這個目錄下的檔案列表<br><img src="example.png" alt="blog hexo folder"><br><em>這張圖片是這個部落格的 hexo 資料夾</em></p><h1 id="port-amp-log"><a href="#port-amp-log" class="headerlink" title="port&amp;log"></a>port&amp;log</h1><p>例如這個可以在 <a href="localhost:8888" target="_blank" rel="noopener">localhost:8888</a> 上開啟一個伺服器，並把所有的 request 給記錄在 console 中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpsrv . -p 8888 -l</span><br></pre></td></tr></table></figure><h2 id="其他選項"><a href="#其他選項" class="headerlink" title="其他選項"></a>其他選項</h2><p>建議直接到 <a href="https://github.com/maple3142/httpsrv/blob/master/README.md" target="_blank" rel="noopener">maple3142/httpsrv</a> 看更完整的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Usage: httpsrv &lt;basedir&gt;</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --help           Show help                                           [boolean]</span><br><span class="line">  --version        Show version number                                 [boolean]</span><br><span class="line">  --port, -p       Port to listen                       [number] [default: 3333]</span><br><span class="line">  --log, -l        Enable logger                                       [boolean]</span><br><span class="line">  --cors, -c       Access-Control-Allow-Origin header                   [string]</span><br><span class="line">  --fallback, -f   A file will be send when 404, useful in SPA          [string]</span><br><span class="line">  --indexhtml, -i  Try to show index.html if exists                    [boolean]</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line">  httpsrv . -p 8888  Start server on port 8888</span><br></pre></td></tr></table></figure><h1 id="進階使用"><a href="#進階使用" class="headerlink" title="進階使用"></a>進階使用</h1><h2 id="blog"><a href="#blog" class="headerlink" title="blog"></a>blog</h2><p>這還可以拿來測試 hexo 所建立出來的網站拿目前這個部落格來做範例 <a href="https://github.com/maple3142/Blog" target="_blank" rel="noopener">GitHub repo</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/maple3142/Blog.git</span><br><span class="line"><span class="built_in">cd</span> Blog</span><br><span class="line">npm install</span><br><span class="line">npm run build <span class="comment">#一般來說是hexo generate, 不過我有把build增加一些東西(例如minify)</span></span><br><span class="line">httpsrv public -i -f 404.html</span><br></pre></td></tr></table></figure><p>最後一行的<code>-i</code>是自動在目錄底下偵測有沒有<code>index.html</code>，有就傳送出來<br><code>-f 404.html</code>是會在找不到檔案(404)時傳送的檔案，還有這邊要注意的是<code>404.html</code>不能打成<code>public/404.html</code></p><h2 id="WynnStats"><a href="#WynnStats" class="headerlink" title="WynnStats"></a>WynnStats</h2><p><a href="/2017/10/27/wynnstats/">WynnStats</a> 是我之前弄的一個 SPA 的練習，打算用它來做為範例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/maple3142/WynnStats.git</span><br><span class="line"><span class="built_in">cd</span> WynnStats</span><br><span class="line">npm install</span><br><span class="line">npm run build</span><br><span class="line">httpsrv dist -i -f index.html</span><br></pre></td></tr></table></figure><p>接下來一樣是開啟 <a href="localhost:3333" target="_blank" rel="noopener">localhost:3333</a>，然後隨便點個連結然後 F5 會發現功能都很正常最後一行看起來和上面幾乎一樣，主要是<code>-f index.html</code>的作用因為 SPA 網站只會有一個<code>index.html</code>，在 404 時就傳送<code>index.html</code>就好了， route 的邏輯是在裡面用 javascript 判斷的</p>]]></content><categories><category> 專案 </category></categories><tags><tag> javascript </tag></tags></entry><entry><title>Anime1 下載器</title><link href="/2017/12/07/anime1-downloader/"/><url>/2017/12/07/anime1-downloader/</url><content type="html"><![CDATA[<p>這是一個簡單的 userscript 用來，可以取得 <a href="https://anime1.me/" target="_blank" rel="noopener">Anime1.me</a> 上面動畫的真實連結<br>安裝連結: <a href="https://greasyfork.org/zh-TW/scripts/35953-anime1-me-%E4%B8%8B%E8%BC%89%E5%99%A8" target="_blank" rel="noopener">Greasy Fork</a></p><blockquote><p>需要先安裝支援 userscript 的擴充插件才能安裝，如 Tampermonkey ViolentMonkey etc…</p></blockquote><p>GitHub: <a href="https://github.com/maple3142/anime1-downloader" target="_blank" rel="noopener">maple3142/anime1-downloader</a></p><a id="more"></a><h1 id="使用教學"><a href="#使用教學" class="headerlink" title="使用教學"></a>使用教學</h1><p>下面以<a href="https://anime1.me/3829" target="_blank" rel="noopener">結城友奈是勇者 鷲尾須美之章 [09]</a>來舉例安裝完成之後點上面那個連結會看到如下的圖片<br><img src="dl1.png" alt="yuyuyu washio 09 demo"></p><p>然後點<strong>下載</strong>按鈕會開啟一個新分頁如下<br><img src="dl2.png" alt="download dialog"><br>在裡面輸入<strong>HD</strong>或是<strong>SD</strong>(看上面寫的)就會啟動瀏覽器的下載功能(非 firefox 瀏覽器)<br>如果是 firefox 就會跳轉到影片的真實網址(同源政策的問題)，然後可以右鍵另存或是用一些下載器來下載<br>(關於 firefox 這個問題的詳細: <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=874009" target="_blank" rel="noopener">Bugzilla874009</a>)</p>]]></content><categories><category> userscript </category></categories><tags><tag> javascript </tag><tag> userscript </tag><tag> download </tag><tag> anime </tag></tags></entry><entry><title>壓縮 hexo 部落格</title><link href="/2017/12/02/compress-hexo-blog/"/><url>/2017/12/02/compress-hexo-blog/</url><content type="html"><![CDATA[<p>hexo 所產生出來的網站都是<strong>靜態</strong>的<code>html</code>頁面，預設情形下到<code>public</code>資料夾隨便打開檔案都會發現許多多餘的空白及換行<br>因此我們可以把這些東西消除，並且減少檔案體積、增加傳輸速度</p><blockquote><p>你現在看的這個網站就是有經過壓縮的</p></blockquote><a id="more"></a><h1 id="安裝-gulp"><a href="#安裝-gulp" class="headerlink" title="安裝 gulp"></a>安裝 gulp</h1><p>在有<code>package.json</code>的路徑下執行下面的指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S gulp gulp-clean-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp-pretty-data gulp-dom</span><br></pre></td></tr></table></figure><p>gulp 是一個拿來批量構建一些東西用的工具我們會使用它加上其他的插件來幫 hexo 產生出來的檔案壓縮<br><img src="gulp.jpg" alt="gulp logo"></p><h1 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h1><h2 id="gulpfile-js"><a href="#gulpfile-js" class="headerlink" title="gulpfile.js"></a>gulpfile.js</h2><p>在<code>package.json</code>同一層的目錄建立一個檔案名為<code>gulpfile.js</code><br>檔案內容如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"><span class="keyword">var</span> cleancss = <span class="built_in">require</span>(<span class="string">'gulp-clean-css'</span>)</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>)</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>)</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>)</span><br><span class="line"><span class="keyword">var</span> prettyData = <span class="built_in">require</span>(<span class="string">'gulp-pretty-data'</span>)</span><br><span class="line"><span class="keyword">var</span> dom = <span class="built_in">require</span>(<span class="string">'gulp-dom'</span>)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//處理css</span></span><br><span class="line"><span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">    .pipe(cleancss(&#123; <span class="attr">compatibility</span>: <span class="string">'ie8'</span> &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;)</span><br><span class="line">gulp.task(<span class="string">'html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//處理html</span></span><br><span class="line"><span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">    .pipe(</span><br><span class="line">      dom(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//這會把每個外連的連結加上rel="noopener noreferrer"(為了安全性)</span></span><br><span class="line"><span class="keyword">var</span> links = <span class="built_in">Array</span>.from(<span class="keyword">this</span>.querySelectorAll(<span class="string">'a'</span>))</span><br><span class="line">        links.filter(<span class="function"><span class="params">link</span> =&gt;</span> link.target === <span class="string">'_blank'</span>).forEach(<span class="function"><span class="params">link</span> =&gt;</span> (link.rel = <span class="string">'noopener noreferrer'</span>))</span><br><span class="line"><span class="keyword">return</span><span class="keyword">this</span></span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(</span><br><span class="line">      htmlmin(&#123;</span><br><span class="line">        removeComments: <span class="literal">true</span>,</span><br><span class="line">        minifyJS: <span class="literal">true</span>,</span><br><span class="line">        minifyCSS: <span class="literal">true</span>,</span><br><span class="line">        minifyURLs: <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;)</span><br><span class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//處理javascript</span></span><br><span class="line"><span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./public/**/*.js'</span>)</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;)</span><br><span class="line">gulp.task(<span class="string">'xml-json'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//處理xml與json(選擇性，如果不要的話就把這一段移除掉並把下面'xml-json'也移除)</span></span><br><span class="line"><span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./public/**/*.(xml|json)'</span>)</span><br><span class="line">    .pipe(</span><br><span class="line">      prettyData(&#123;</span><br><span class="line">        type: <span class="string">'minify'</span>,</span><br><span class="line">        preserveComments: <span class="literal">true</span>,</span><br><span class="line">        extensions: &#123;</span><br><span class="line">          xlf: <span class="string">'xml'</span>,</span><br><span class="line">          svg: <span class="string">'xml'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'public'</span>))</span><br><span class="line">&#125;)</span><br><span class="line">gulp.task(<span class="string">'default'</span>, [</span><br><span class="line"><span class="comment">//執行tasks</span></span><br><span class="line"><span class="string">'css'</span>,</span><br><span class="line"><span class="string">'html'</span>,</span><br><span class="line"><span class="string">'js'</span>,</span><br><span class="line"><span class="string">'xml-json'</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>接下來打開<code>package.json</code><br>新增一個<code>scripts</code>的區塊，裡面有個字串<code>build</code>，值填入<code>hexo clean &amp;&amp; hexo g &amp;&amp; gulp</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//something....</span></span><br><span class="line"><span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line"><span class="string">"build"</span>: <span class="string">"hexo clean &amp;&amp; hexo g &amp;&amp; gulp"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"dependencies"</span>: &#123; <span class="comment">//something....</span></span><br></pre></td></tr></table></figure><h1 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h1><p>基本上這樣就完成了未來只要執行<code>npm run build</code>就會自動產生檔案並壓縮，而執行<code>hexo generate</code>只會產生檔案而不會壓縮</p><p>此外，<code>gulpfile.js</code>其實還能做很多事來修改頁面上的一些東西，但我懶得寫文章詳細講<br>有興趣的可以來看看這個網站所用的 <a href="https://github.com/maple3142/Blog/blob/master/gulpfile.js" target="_blank" rel="noopener">gulefile.js</a></p>]]></content><categories><category> 教學 </category></categories><tags><tag> hexo </tag></tags></entry><entry><title>阻擋 Android 版巴哈姆特的廣告</title><link href="/2017/11/26/block-android-bahamut-ads/"/><url>/2017/11/26/block-android-bahamut-ads/</url><content type="html"><![CDATA[<p>這篇教學是一個簡單的教學教你如何，阻擋巴哈姆特 App 廣告的方法<br>寫這篇文章時的測試版本為 5.6.3，不過到目前最新版為止都還有效</p><a id="more"></a><h1 id="Adguard"><a href="#Adguard" class="headerlink" title="Adguard"></a>Adguard</h1><p>AdGuard 是一個俄羅斯開發的廣告阻擋器，有 Windows,MacOS,Android…等版本以及瀏覽器的擴充插件能用阻擋巴哈 app 需要的是 Android 版本下載連結: <a href="https://adguard.com/en/adguard-android/overview.html" target="_blank" rel="noopener">https://adguard.com/en/adguard-android/overview.html</a></p><p>不過需要阻擋 app 內的流量是需要付費使用完整版的，可以考慮購買正版的(不貴)，或是去網路上找<strong>特殊版本</strong>來用</p><h1 id="安裝-https-憑證"><a href="#安裝-https-憑證" class="headerlink" title="安裝 https 憑證"></a>安裝 https 憑證</h1><p>在 App 中打開側欄點擊”設定”&gt;&gt;”HTTPS 過濾”<br>然後把選項打開<br><img src="https.png" alt="https憑證"></p><h1 id="新增過濾規則"><a href="#新增過濾規則" class="headerlink" title="新增過濾規則"></a>新增過濾規則</h1><p>然後回到”設定”&gt;&gt;”使用者過濾器”<br>點擊”+”號新增一條規則，內容填上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">||api.gamer.com.tw/mobile_app/ad/*^$empty</span><br></pre></td></tr></table></figure><p><img src="addrule.png" alt="新增規則"></p><h1 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h1><p>回到 AdGuard 主頁啟用廣告阻擋然後打開巴哈姆特 App 測試一下依我在巴哈姆特 5.6.3 版之下是能成功阻擋所有廣告的，不知道未來會不會有改變</p>]]></content><categories><category> 研究 </category></categories><tags><tag> Bahamut </tag><tag> ads </tag><tag> android </tag></tags></entry><entry><title>javascript 右鍵選單</title><link href="/2017/11/22/javascript-contextmenu/"/><url>/2017/11/22/javascript-contextmenu/</url><content type="html"><![CDATA[<p>我在有空的時候試著用純 javascript 實作了一個簡單的右鍵選單<br>雖然沒搞什麼複雜的 css，外觀也很醜，但基本上以功能來說是可以用的</p><a id="more"></a><h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p><del>css 有一部分其實是仿 bootstrap 的</del></p><p><a href="https://codepen.io/maple3142/pen/qVKoqq/" target="_blank" rel="noopener">DEMO</a></p><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ctxmenu = <span class="built_in">document</span>.querySelector(<span class="string">'.ctxmenu'</span>) <span class="comment">//選單元素</span></span><br><span class="line"><span class="keyword">const</span> baseEL = <span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>) <span class="comment">//要自訂選單的元素</span></span><br></pre></td></tr></table></figure><h1 id="處理事件"><a href="#處理事件" class="headerlink" title="處理事件"></a>處理事件</h1><h2 id="顯示選單"><a href="#顯示選單" class="headerlink" title="顯示選單"></a>顯示選單</h2><p>簡單來說就是把選單的位置移動到 event 的位置，然後顯示他</p><p>還有很重要的是要呼叫<code>stopPropagation()</code>這個函數，和後面做的事情有關</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">baseEL.addEventListener(<span class="string">'contextmenu'</span>, e =&gt; &#123;</span><br><span class="line">  e.preventDefault()</span><br><span class="line">  e.stopPropagation() <span class="comment">//important!!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//move element</span></span><br><span class="line">  ctxmenu.style.top = e.y + <span class="string">'px'</span></span><br><span class="line">  ctxmenu.style.left = e.x + <span class="string">'px'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//show element</span></span><br><span class="line">  ctxmenu.classList.add(<span class="string">'show'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="取消選單"><a href="#取消選單" class="headerlink" title="取消選單"></a>取消選單</h2><p>這邊會看到<code>contextmenu</code>和<code>click</code>都做一樣的事情，就是隱藏選單</p><p>而如果在前面的步驟沒有<code>stopPropagation()</code>的話會導致點擊在指定元素時也會同時移除<code>show</code>這個 class</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'contextmenu'</span>, e =&gt; &#123;</span><br><span class="line">  ctxmenu.classList.remove(<span class="string">'show'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, e =&gt; &#123;</span><br><span class="line">  ctxmenu.classList.remove(<span class="string">'show'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content><categories><category> javascript </category></categories><tags><tag> javascript </tag></tags></entry><entry><title>Hexo NexT 主題的閱讀次數統計</title><link href="/2017/11/04/hexo-next-readcount/"/><url>/2017/11/04/hexo-next-readcount/</url><content type="html"><![CDATA[<p>這是一個在 <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">Next</a> 主題上的小功能可以在文章及首頁顯示文章的閱讀次數使用了 <a href="https://firebase.google.com/docs/firestore/" target="_blank" rel="noopener">firestore</a> 作為資料庫<br><a href="https://github.com/iissnan/hexo-theme-next/pulls?utf8=%E2%9C%93&q=is%3Apr%20firestore%20" target="_blank" rel="noopener">之前發的 PR</a></p><blockquote><p>需要 Next v5.1.4 以上的版本</p></blockquote><blockquote><p>更新: 目前已不建議使用此插件</p></blockquote><a id="more"></a><p><img src="./example.jpg" alt="預覽圖"></p><h1 id="使用教學"><a href="#使用教學" class="headerlink" title="使用教學"></a>使用教學</h1><h2 id="取得-firestore-資料庫"><a href="#取得-firestore-資料庫" class="headerlink" title="取得 firestore 資料庫"></a>取得 firestore 資料庫</h2><p>到 <a href="https://console.firebase.google.com/u/0/" target="_blank" rel="noopener">firebase 網站</a> 創建一個專案<br><em>專案名稱之類的都可以自己選</em><br><img src="./createproj.jpg" alt="創建專案"></p><p>接下來創建完成之後在左側選擇 <em>Database</em> 會出現選擇資料庫的頁面在這個步驟請選擇右側的 <strong>Cloud Firestore</strong><br><img src="./choosedb.jpg" alt="選擇資料庫"><br>然後選擇 <strong>以測試模式啟動</strong> (之後會再設定安全性)<br><img src="./default_security.jpg" alt="選擇模式"></p><h2 id="設定-config-yml"><a href="#設定-config-yml" class="headerlink" title="設定 _config.yml"></a>設定 _config.yml</h2><p>在上面的步驟建立完成 firestore 資料庫之後按照下面的圖片裡的 <strong>1</strong>,<strong>2</strong> 點擊然後會看到圖片中的資訊，projectid 和 apikey 是待會在設定檔裡面要用到的<br><img src="./getapi.jpg" alt="取得apikey"></p><p>接下來開啟主題的<code>_config.yml</code> (<code>themes/next/_config.yml</code>) 並且找到 <code>firestore</code>的部分預設值:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Another tool to show number of visitors to each article.</span></span><br><span class="line"><span class="comment"># visit https://console.firebase.google.com/u/0/ to get apiKey and projectId</span></span><br><span class="line"><span class="comment"># visit https://firebase.google.com/docs/firestore/ to get more information about firestore</span></span><br><span class="line"><span class="attr">firestore:</span></span><br><span class="line"><span class="attr">  enable:</span><span class="literal">false</span></span><br><span class="line"><span class="attr">  collection:</span><span class="string">articles</span><span class="comment">#required, a string collection name to access firestore database</span></span><br><span class="line"><span class="attr">  apiKey:</span><span class="comment">#required</span></span><br><span class="line"><span class="attr">  projectId:</span><span class="comment">#required</span></span><br><span class="line"><span class="attr">  bluebird:</span><span class="literal">false</span><span class="comment">#enable this if you want to include bluebird 3.5.1(core version) Promise polyfill</span></span><br></pre></td></tr></table></figure><p>把<code>enable</code>設定成<code>true</code><br>然後把前面得到的<code>apikey</code>和<code>projectId</code>填入對應的欄位中<br><code>collection</code>改不改都行，不知道這是什麼的話請別更改</p><blockquote><p>collection 的值會影響閱讀次數的數值儲存在哪裡</p></blockquote><p>如果需要支援一些老舊的瀏覽器請把<code>bluebird</code>設定成<code>true</code></p><blockquote><p>Bluebird 為了支援 Promise ，詳細的相容性可以到 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise#瀏覽器相容性" target="_blank" rel="noopener">MDN</a> 上看</p></blockquote><p>改完的 _config.yml:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">firestore:</span></span><br><span class="line"><span class="attr">  enable:</span><span class="literal">true</span></span><br><span class="line"><span class="attr">  collection:</span><span class="string">articles</span></span><br><span class="line"><span class="attr">  apiKey:</span><span class="string">AIzaSyDcPXjPoq3kEL245f4P4SDPop7uAD-XZXc</span><span class="comment">#required</span></span><br><span class="line"><span class="attr">  projectId:</span><span class="string">hexo-next-firestore-example</span><span class="comment">#required</span></span><br><span class="line"><span class="attr">  bluebird:</span><span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>接下來執行<code>hexo s</code>啟動測試伺服器應該要在首頁的每篇文章的標題下面看到<strong>閱讀次數</strong></p><p>然後點進任何一篇文章也要在標題下面看到<strong>閱讀次數</strong><br><img src="./example.jpg" alt="預覽圖"></p><h2 id="firestore-安全設定"><a href="#firestore-安全設定" class="headerlink" title="firestore 安全設定"></a>firestore 安全設定</h2><p><strong>這個步驟可做可不做</strong></p><p>接下來在 firebase 裡面回到 Database 頁面，然後選擇上面的<strong>規則</strong><br><img src="./rule.jpg" alt="firestore規則"></p><p>把裡面的值改成下面的來限制只有<code>articles</code>這個 collection 可以被修改如果在前面的設定裡的<code>collection</code>的值不是<code>articles</code>的話下面也要修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">service cloud.firestore &#123;</span><br><span class="line">  match /databases/&#123;database&#125;/documents &#123;</span><br><span class="line">    match /articles/&#123;any&#125; &#123;</span><br><span class="line">      allow read: if true;</span><br><span class="line">      allow write: if request.resource.data.count==resource.data.count+1;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h1><p>會弄出這個功能的原因是不想使用原本就有的 <a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">LeanCloud 統計功能</a> (這個的設定方法比較簡單)<br>所以就自己用 javascript 來簡單的實作了一個統計次數的功能然後發 PR 給主題</p>]]></content><categories><category> 教學 </category></categories><tags><tag> hexo </tag><tag> firestore </tag></tags></entry><entry><title>vue 插件: vue-runkit</title><link href="/2017/10/29/vue-runkit/"/><url>/2017/10/29/vue-runkit/</url><content type="html"><![CDATA[<p><code>vue-runkit</code> 是一個 vue component，是 <a href="https://runkit.com/docs/embed" target="_blank" rel="noopener">runkit</a> 的 wrapper</p><blockquote><p>runkit 是一個讓你在瀏覽器上執行一些 node.js 程式的網站</p></blockquote><p>GitHub: <a href="https://github.com/maple3142/vue-runkit" target="_blank" rel="noopener">https://github.com/maple3142/vue-runkit</a></p><a id="more"></a><h1 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h1><p>安裝: <code>npm install vue-runkit</code><br>cdn: <code>https://unpkg.com/vue-runkit</code></p><h1 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--建議手動引用"https://embed.runkit.com"，不過就算沒有的話vue-runkit也會自動加入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span><span class="attr">src</span>=<span class="string">"https://embed.runkit.com"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span><span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span><span class="attr">src</span>=<span class="string">"https://unpkg.com/vue-runkit/dist/vue-runkit.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">id</span>=<span class="string">"runkit"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--加button是為了只在需要時才載入embed--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span><span class="attr">v-if</span>=<span class="string">"!show"</span> @<span class="attr">click</span>=<span class="string">"show=!show"</span>&gt;</span>show embed<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">runkit</span><span class="attr">v-else</span><span class="attr">:source</span>=<span class="string">"code"</span><span class="attr">:env</span>=<span class="string">"env"</span><span class="attr">node-version</span>=<span class="string">"8"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'runkit'</span>, vuerunkit) <span class="comment">//註冊 component</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#runkit'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    show: <span class="literal">false</span>,</span><br><span class="line">    code: <span class="string">'console.log(process.env.msg)'</span>, <span class="comment">//code</span></span><br><span class="line">    env: [<span class="string">'msg="Hello World"'</span>] <span class="comment">//環境變數</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content><categories><category> 專案 </category></categories><tags><tag> vue </tag></tags></entry><entry><title>vue 插件: vuejs-storage</title><link href="/2017/10/28/vuejs-storage/"/><url>/2017/10/28/vuejs-storage/</url><content type="html"><![CDATA[<p>這是一個為 vue 綁定 localStorage/sessionStorage 的插件，也能用於 vuex 上面</p><p>GitHub: <a href="https://github.com/maple3142/vuejs-storage" target="_blank" rel="noopener">https://github.com/maple3142/vuejs-storage</a></p><p>簡單的 TodoList 範例: <a href="https://github.com/maple3142/TodoList" target="_blank" rel="noopener">maple3142/TodoList</a></p><a id="more"></a><h1 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h1><p>安裝: <code>npm install vuejs-storage</code><br>瀏覽器可以引用 cdn: <code>https://unpkg.com/vuejs-storage</code></p><h1 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span><span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span><span class="attr">src</span>=<span class="string">"https://unpkg.com/vuejs-storage/dist/vuejs-storage.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">id</span>=<span class="string">"vjss"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span><span class="attr">type</span>=<span class="string">"text"</span><span class="attr">v-model</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(vuejsStorage) <span class="comment">//安裝插件</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#vjss'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    text: <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line">  storage: &#123;</span><br><span class="line"><span class="comment">//使用storage選項</span></span><br><span class="line">    namespace: <span class="string">'vuejs-storage-example'</span>,</span><br><span class="line"><span class="comment">//指定要存哪些變數</span></span><br><span class="line">    keys: [<span class="string">'text'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>更多詳細的教學可以到 <a href="https://github.com/maple3142/vuejs-storage" target="_blank" rel="noopener">https://github.com/maple3142/vuejs-storage</a> 上看</p>]]></content><categories><category> 專案 </category></categories><tags><tag> vue </tag></tags></entry><entry><title>vue SPA: WynnStats</title><link href="/2017/10/27/wynnstats/"/><url>/2017/10/27/wynnstats/</url><content type="html"><![CDATA[<p><a href="https://wynnstats.netlify.com/" target="_blank" rel="noopener">WynnStats</a> 是一個練習用的 SPA 網站，它可以顯示<a href="https://wynncraft.com" target="_blank" rel="noopener">WynnCraft</a>伺服器的一些資訊<br>GitHub: <a href="https://github.com/maple3142/WynnStats" target="_blank" rel="noopener">https://github.com/maple3142/WynnStats</a></p><a id="more"></a><h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p><img src="example.png" alt="example"></p><p>使用 vue 製作，每個頁面都是靠<code>fetch()</code>向 api server 請求資訊，然後透過 vue 來顯示出來的<br>UI 部分使用了 <a href="https://github.com/bootstrap-vue/bootstrap-vue/" target="_blank" rel="noopener">bootstrap-vue</a></p>]]></content><categories><category> 專案 </category></categories><tags><tag> vue </tag></tags></entry><entry><title></title><link href="/manifest.json"/><url>/manifest.json</url><content type="html"><![CDATA[{"name":"maple3142","short_name":"maple3142","start_url":"/","display":"standalone","background_color":"#fff","description":"maple3142's blog","icons":[{"src":"/icon.png","type":"image/png","sizes":"144x144"}]}]]></content></entry><entry><title>404 Not Found</title><link href="/404.html"/><url>/404.html</url><content type="html"><![CDATA[<blockquote class="blockquote-center"><p><a href="/">回到首頁</a></p></blockquote>]]></content></entry><entry><title>認證成功</title><link href="/bahamut-imgur-upload.html"/><url>/bahamut-imgur-upload.html</url><content type="html"><![CDATA[<blockquote class="blockquote-center"><p>imgur 的登入已經認證成功了，可以關閉這個視窗並繼續上傳</p></blockquote>]]></content></entry><entry><title>關於</title><link href="/about/index.html"/><url>/about/index.html</url><content type="html"><![CDATA[<html><head><style type="text/css">                            .mjpage .MJX-monospace {                            font-family: monospace                            }                            .mjpage .MJX-sans-serif {                            font-family: sans-serif                            }                            .mjpage {                            display: inline;                            font-style: normal;                            font-weight: normal;                            line-height: normal;                            font-size: 100%;                            font-size-adjust: none;                            text-indent: 0;                            text-align: left;                            text-transform: none;                            letter-spacing: normal;                            word-spacing: normal;                            word-wrap: normal;                            white-space: nowrap;                            float: none;                            direction: ltr;                            max-width: none;                            max-height: none;                            min-width: 0;                            min-height: 0;                            border: 0;                            padding: 0;                            margin: 0                            }                            .mjpage * {                            transition: none;                            -webkit-transition: none;                            -moz-transition: none;                            -ms-transition: none;                            -o-transition: none                            }                            .mjx-svg-href {                            fill: blue;                            stroke: blue                            }                            .MathJax_SVG_LineBox {                            display: table!important                            }                            .MathJax_SVG_LineBox span {                            display: table-cell!important;                            width: 10000em!important;                            min-width: 0;                            max-width: none;                            padding: 0;                            border: 0;                            margin: 0                            }                            .mjpage__block {                            text-align: center;                            margin: 1em 0em;                            position: relative;                            display: block!important;                            text-indent: 0;                            max-width: none;                            max-height: none;                            min-width: 0;                            min-height: 0;                            width: 100%                            }</style></head><body><blockquote class="blockquote-center"><p>目前是在資工系學習的大學生，興趣和專長都是是資訊相關</p><p>喜歡無聊想到什麼就寫什麼出來用，很多時候一投入就會花上好幾個小時在一個專案或一些東西上</p><p>有事沒事都會弄出一些奇奇怪怪的東西，在 GitHub 上應該能看到很多莫名其妙的 Repo</p><p>而目前這個部落格是用 <a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">Hexo</a> 搭配 <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT</a> 主題弄出來的</p><p><a href="https://home.gamer.com.tw/kirby123" target="_blank" rel="noopener">巴哈姆特 kirby123</a><br><a href="https://www.youtube.com/playlist?list=FLN1n3pVelfQ_G4uD-an16SQ" target="_blank" rel="noopener">YT 收藏</a><br><a href="https://music.163.com/playlist?id=625754106" target="_blank" rel="noopener">網易雲歌單</a></p><a id="more"></a><p>測試一些 MathJax:</p><p><span class="mjpage mjpage__block"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="21.525ex" height="6.176ex" style="vertical-align: -1.838ex;" viewbox="0 -1867.7 9267.9 2659.1" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title"><title id="MathJax-SVG-1-Title">x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}</title><defs aria-hidden="true"><path stroke-width="1" id="E1-MJMATHI-78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/><path stroke-width="1" id="E1-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/><path stroke-width="1" id="E1-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/><path stroke-width="1" id="E1-MJMATHI-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/><path stroke-width="1" id="E1-MJMAIN-B1" d="M56 320T56 333T70 353H369V502Q369 651 371 655Q376 666 388 666Q402 666 405 654T409 596V500V353H707Q722 345 722 333Q722 320 707 313H409V40H707Q722 32 722 20T707 0H70Q56 7 56 20T70 40H369V313H70Q56 320 56 333Z"/><path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path stroke-width="1" id="E1-MJMAIN-34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"/><path stroke-width="1" id="E1-MJMATHI-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/><path stroke-width="1" id="E1-MJMATHI-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/><path stroke-width="1" id="E1-MJSZ1-221A" d="M263 249Q264 249 315 130T417 -108T470 -228L725 302Q981 837 982 839Q989 850 1001 850Q1008 850 1013 844T1020 832V826L741 243Q645 43 540 -176Q479 -303 469 -324T453 -348Q449 -350 436 -350L424 -349L315 -96Q206 156 205 156L171 130Q138 104 137 104L111 130L263 249Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true"><use xlink:href="#E1-MJMATHI-78" x="0" y="0"/><use xlink:href="#E1-MJMAIN-3D" x="850" y="0"/><g transform="translate(1628,0)"><g transform="translate(397,0)"><rect stroke="none" width="7121" height="60" x="0" y="220"/><g transform="translate(60,775)"><use xlink:href="#E1-MJMAIN-2212" x="0" y="0"/><use xlink:href="#E1-MJMATHI-62" x="778" y="0"/><use xlink:href="#E1-MJMAIN-B1" x="1430" y="0"/><g transform="translate(2430,0)"><use xlink:href="#E1-MJSZ1-221A" x="0" y="94"/><rect stroke="none" width="3569" height="60" x="1000" y="885"/><g transform="translate(1000,0)"><use xlink:href="#E1-MJMATHI-62" x="0" y="0"/><use transform="scale(0.707)" xlink:href="#E1-MJMAIN-32" x="607" y="408"/><use xlink:href="#E1-MJMAIN-2212" x="1105" y="0"/><use xlink:href="#E1-MJMAIN-34" x="2106" y="0"/><use xlink:href="#E1-MJMATHI-61" x="2606" y="0"/><use xlink:href="#E1-MJMATHI-63" x="3136" y="0"/></g></g></g><g transform="translate(3045,-687)"><use xlink:href="#E1-MJMAIN-32" x="0" y="0"/><use xlink:href="#E1-MJMATHI-61" x="500" y="0"/></g></g></g></g></svg></span></p><p><span class="mjpage mjpage__block"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="34.723ex" height="6.176ex" style="vertical-align: -2.505ex;" viewbox="0 -1580.7 14950.3 2659.1" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-2-Title"><title id="MathJax-SVG-2-Title">   \begin{bmatrix}     f(n) \\     f(n-1)   \end{bmatrix}   =   \begin{bmatrix}     1 &amp; 1 \\     1 &amp; 0   \end{bmatrix}   \begin{bmatrix}     f(n-1) \\     f(n-2)   \end{bmatrix} </title><defs aria-hidden="true"><path stroke-width="1" id="E2-MJMAIN-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/><path stroke-width="1" id="E2-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/><path stroke-width="1" id="E2-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/><path stroke-width="1" id="E2-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/><path stroke-width="1" id="E2-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/><path stroke-width="1" id="E2-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/><path stroke-width="1" id="E2-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path stroke-width="1" id="E2-MJMAIN-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/><path stroke-width="1" id="E2-MJSZ3-5B" d="M247 -949V1450H516V1388H309V-887H516V-949H247Z"/><path stroke-width="1" id="E2-MJSZ3-5D" d="M11 1388V1450H280V-949H11V-887H218V1388H11Z"/><path stroke-width="1" id="E2-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/><path stroke-width="1" id="E2-MJMAIN-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/><path stroke-width="1" id="E2-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true"><use xlink:href="#E2-MJSZ3-5B"/><g transform="translate(695,0)"><g transform="translate(-11,0)"><g transform="translate(861,701)"><use xlink:href="#E2-MJMATHI-66" x="0" y="0"/><use xlink:href="#E2-MJMAIN-28" x="550" y="0"/><use xlink:href="#E2-MJMATHI-6E" x="940" y="0"/><use xlink:href="#E2-MJMAIN-29" x="1540" y="0"/></g><g transform="translate(0,-750)"><use xlink:href="#E2-MJMATHI-66" x="0" y="0"/><use xlink:href="#E2-MJMAIN-28" x="550" y="0"/><use xlink:href="#E2-MJMATHI-6E" x="940" y="0"/><use xlink:href="#E2-MJMAIN-2212" x="1762" y="0"/><use xlink:href="#E2-MJMAIN-31" x="2763" y="0"/><use xlink:href="#E2-MJMAIN-29" x="3263" y="0"/></g></g></g><use xlink:href="#E2-MJSZ3-5D" x="4505" y="-1"/><use xlink:href="#E2-MJMAIN-3D" x="5311" y="0"/><g transform="translate(6368,0)"><use xlink:href="#E2-MJSZ3-5B"/><g transform="translate(695,0)"><g transform="translate(-11,0)"><use xlink:href="#E2-MJMAIN-31" x="0" y="650"/><use xlink:href="#E2-MJMAIN-31" x="0" y="-750"/></g><g transform="translate(1490,0)"><use xlink:href="#E2-MJMAIN-31" x="0" y="650"/><use xlink:href="#E2-MJMAIN-30" x="0" y="-750"/></g></g><use xlink:href="#E2-MJSZ3-5D" x="2853" y="-1"/></g><g transform="translate(9916,0)"><use xlink:href="#E2-MJSZ3-5B"/><g transform="translate(695,0)"><g transform="translate(-11,0)"><g transform="translate(0,701)"><use xlink:href="#E2-MJMATHI-66" x="0" y="0"/><use xlink:href="#E2-MJMAIN-28" x="550" y="0"/><use xlink:href="#E2-MJMATHI-6E" x="940" y="0"/><use xlink:href="#E2-MJMAIN-2212" x="1762" y="0"/><use xlink:href="#E2-MJMAIN-31" x="2763" y="0"/><use xlink:href="#E2-MJMAIN-29" x="3263" y="0"/></g><g transform="translate(0,-750)"><use xlink:href="#E2-MJMATHI-66" x="0" y="0"/><use xlink:href="#E2-MJMAIN-28" x="550" y="0"/><use xlink:href="#E2-MJMATHI-6E" x="940" y="0"/><use xlink:href="#E2-MJMAIN-2212" x="1762" y="0"/><use xlink:href="#E2-MJMAIN-32" x="2763" y="0"/><use xlink:href="#E2-MJMAIN-29" x="3263" y="0"/></g></g></g><use xlink:href="#E2-MJSZ3-5D" x="4505" y="-1"/></g></g></svg></span></p><p><span class="mjpage mjpage__block"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="20.142ex" height="6.009ex" style="vertical-align: -2.171ex;" viewbox="0 -1652.5 8672 2587.3" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-3-Title"><title id="MathJax-SVG-3-Title">   F=\frac{GMm}{R^2}=m\frac{v^2}{R} </title><defs aria-hidden="true"><path stroke-width="1" id="E3-MJMATHI-46" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"/><path stroke-width="1" id="E3-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/><path stroke-width="1" id="E3-MJMATHI-47" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"/><path stroke-width="1" id="E3-MJMATHI-4D" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"/><path stroke-width="1" id="E3-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/><path stroke-width="1" id="E3-MJMATHI-52" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/><path stroke-width="1" id="E3-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path stroke-width="1" id="E3-MJMATHI-76" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true"><use xlink:href="#E3-MJMATHI-46" x="0" y="0"/><use xlink:href="#E3-MJMAIN-3D" x="1027" y="0"/><g transform="translate(1805,0)"><g transform="translate(397,0)"><rect stroke="none" width="2836" height="60" x="0" y="220"/><g transform="translate(60,676)"><use xlink:href="#E3-MJMATHI-47" x="0" y="0"/><use xlink:href="#E3-MJMATHI-4D" x="786" y="0"/><use xlink:href="#E3-MJMATHI-6D" x="1838" y="0"/></g><g transform="translate(811,-780)"><use xlink:href="#E3-MJMATHI-52" x="0" y="0"/><use transform="scale(0.707)" xlink:href="#E3-MJMAIN-32" x="1074" y="408"/></g></g></g><use xlink:href="#E3-MJMAIN-3D" x="5437" y="0"/><use xlink:href="#E3-MJMATHI-6D" x="6494" y="0"/><g transform="translate(7372,0)"><g transform="translate(120,0)"><rect stroke="none" width="1059" height="60" x="0" y="220"/><g transform="translate(60,676)"><use xlink:href="#E3-MJMATHI-76" x="0" y="0"/><use transform="scale(0.707)" xlink:href="#E3-MJMAIN-32" x="686" y="513"/></g><use xlink:href="#E3-MJMATHI-52" x="149" y="-704"/></g></g></g></svg></span></p><p>Inline: <span class="mjpage"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="9.426ex" height="2.343ex" style="vertical-align: -0.505ex;" viewbox="0 -791.3 4058.5 1008.6" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-4-Title"><title id="MathJax-SVG-4-Title">1+1=2</title><defs aria-hidden="true"><path stroke-width="1" id="E4-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path stroke-width="1" id="E4-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/><path stroke-width="1" id="E4-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/><path stroke-width="1" id="E4-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true"><use xlink:href="#E4-MJMAIN-31" x="0" y="0"/><use xlink:href="#E4-MJMAIN-2B" x="722" y="0"/><use xlink:href="#E4-MJMAIN-31" x="1723" y="0"/><use xlink:href="#E4-MJMAIN-3D" x="2501" y="0"/><use xlink:href="#E4-MJMAIN-32" x="3558" y="0"/></g></svg></span></p></blockquote></body></html>]]></content></entry><entry><title>分類</title><link href="/categories/index.html"/><url>/categories/index.html</url><content type="html"><![CDATA[]]></content></entry><entry><title>標籤</title><link href="/tags/index.html"/><url>/tags/index.html</url><content type="html"><![CDATA[]]></content></entry></search>
